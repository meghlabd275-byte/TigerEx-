version: '3.8'

services:
  # Database Services
  mongodb:
    image: mongo:6.0
    container_name: tigerex-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: tigerex
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - tigerex-network

  redis:
    image: redis:7-alpine
    container_name: tigerex-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tigerex-network

  postgres:
    image: postgres:15
    container_name: tigerex-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: tigerex
      POSTGRES_USER: tigerex
      POSTGRES_PASSWORD: tigerex123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tigerex-network

  # Backend Services
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: tigerex-api-gateway
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/tigerex?authSource=admin
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    depends_on:
      - mongodb
      - redis
    networks:
      - tigerex-network

  user-service:
    build:
      context: ./backend/account-management-service
      dockerfile: Dockerfile
    container_name: tigerex-user-service
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/tigerex?authSource=admin
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    depends_on:
      - mongodb
      - redis
    networks:
      - tigerex-network

  trading-service:
    build:
      context: ./backend/trading-engine
      dockerfile: Dockerfile
    container_name: tigerex-trading-service
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/tigerex?authSource=admin
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongodb
      - redis
    networks:
      - tigerex-network

  payment-gateway:
    build:
      context: ./backend/payment-gateway
      dockerfile: Dockerfile
    container_name: tigerex-payment-gateway
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/tigerex?authSource=admin
      - STRIPE_SECRET_KEY=sk_test_your_stripe_key
      - PAYPAL_CLIENT_ID=your_paypal_client_id
      - PAYPAL_CLIENT_SECRET=your_paypal_client_secret
    depends_on:
      - mongodb
    networks:
      - tigerex-network

  # Frontend Services
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tigerex-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3000
      - REACT_APP_ENV=production
    depends_on:
      - api-gateway
    networks:
      - tigerex-network

  admin-dashboard:
    build:
      context: ./frontend/admin-dashboard
      dockerfile: Dockerfile
    container_name: tigerex-admin-dashboard
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3000
      - REACT_APP_ENV=production
    depends_on:
      - api-gateway
    networks:
      - tigerex-network

  # Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tigerex-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - admin-dashboard
      - api-gateway
    networks:
      - tigerex-network

volumes:
  mongodb_data:
  redis_data:
  postgres_data:

networks:
  tigerex-network:
    driver: bridge

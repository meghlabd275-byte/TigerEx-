version: '3.8'

services:
  # Core Infrastructure
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: tigerex_hex
      POSTGRES_USER: tigerex
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/databases/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - tigerex-network

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - tigerex-network

  # Hex Trading Engine
  hex-trading-engine:
    build:
      context: ./backend/hex-trading-engine
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://tigerex:${POSTGRES_PASSWORD}@postgres:5432/tigerex_hex
      - REDIS_URL=redis://redis:6379
      - ETH_RPC_URL=${ETH_RPC_URL}
      - BSC_RPC_URL=${BSC_RPC_URL}
      - POLYGON_RPC_URL=${POLYGON_RPC_URL}
      - ARBITRUM_RPC_URL=${ARBITRUM_RPC_URL}
      - AVALANCHE_RPC_URL=${AVALANCHE_RPC_URL}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  # DEX Integration Service
  dex-integration-service:
    build:
      context: ./backend/dex-integration-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://tigerex:${POSTGRES_PASSWORD}@postgres:5432/tigerex_hex
      - REDIS_URL=redis://redis:6379
      - ETH_RPC_URL=${ETH_RPC_URL}
      - BSC_RPC_URL=${BSC_RPC_URL}
      - POLYGON_RPC_URL=${POLYGON_RPC_URL}
      - ARBITRUM_RPC_URL=${ARBITRUM_RPC_URL}
      - AVALANCHE_RPC_URL=${AVALANCHE_RPC_URL}
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  # Account Management Service
  account-management-service:
    build:
      context: ./backend/account-management-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://tigerex:${POSTGRES_PASSWORD}@postgres:5432/tigerex_hex
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "8002:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  # Portfolio Management Service
  portfolio-management-service:
    build:
      context: ./backend/portfolio-management-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://tigerex:${POSTGRES_PASSWORD}@postgres:5432/tigerex_hex
      - REDIS_URL=redis://redis:6379
    ports:
      - "8003:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  # Risk Management Service
  risk-management-service:
    build:
      context: ./backend/risk-management-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://tigerex:${POSTGRES_PASSWORD}@postgres:5432/tigerex_hex
      - REDIS_URL=redis://redis:6379
    ports:
      - "8004:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://tigerex:${POSTGRES_PASSWORD}@postgres:5432/tigerex_hex
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    ports:
      - "8005:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_DEX_API_URL=http://localhost:8001
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - hex-trading-engine
      - dex-integration-service
    networks:
      - tigerex-network
    restart: unless-stopped

  # Admin Dashboard
  admin-dashboard:
    build:
      context: ./frontend/admin-dashboard
      dockerfile: Dockerfile
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ADMIN_SECRET=${ADMIN_SECRET}
    ports:
      - "3001:3000"
    depends_on:
      - hex-trading-engine
    networks:
      - tigerex-network
    restart: unless-stopped

  # API Gateway / Load Balancer
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx-hex.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - hex-trading-engine
      - dex-integration-service
    networks:
      - tigerex-network
    restart: unless-stopped

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - tigerex-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    networks:
      - tigerex-network
    restart: unless-stopped

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=tigerex
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - tigerex-network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ./backend/hex-trading-engine
      dockerfile: Dockerfile
    command: celery -A main.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://tigerex:${POSTGRES_PASSWORD}@postgres:5432/tigerex_hex
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=pyamqp://tigerex:${RABBITMQ_PASSWORD}@rabbitmq:5672//
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - tigerex-network
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: ./backend/hex-trading-engine
      dockerfile: Dockerfile
    command: celery -A main.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://tigerex:${POSTGRES_PASSWORD}@postgres:5432/tigerex_hex
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=pyamqp://tigerex:${RABBITMQ_PASSWORD}@rabbitmq:5672//
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - tigerex-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  tigerex-network:
    driver: bridge
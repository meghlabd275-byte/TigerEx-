version: '3.8'

services:
  # Frontend - Next.js Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://api-gateway:8000
    depends_on:
      - api-gateway
    networks:
      - tigerex-network

  # API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - GO_ENV=production
      - AUTH_SERVICE_URL=http://auth-service:3001
      - TRADING_SERVICE_URL=http://spot-trading:3002
      - PAYMENT_SERVICE_URL=http://payment-gateway-service:3003
    depends_on:
      - auth-service
      - spot-trading
      - mongodb
      - redis
    networks:
      - tigerex-network

  # Authentication Service
  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/tigerex_auth
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongodb
      - redis
    networks:
      - tigerex-network

  # Spot Trading Service
  spot-trading:
    build:
      context: ./backend/spot-trading
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/tigerex_trading
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongodb
      - redis
    networks:
      - tigerex-network

  # Payment Gateway Service
  payment-gateway-service:
    build:
      context: ./backend/payment-gateway-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/tigerex_payments
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
    depends_on:
      - mongodb
    networks:
      - tigerex-network

  # Unified Admin Panel
  unified-admin-panel:
    build:
      context: ./backend/unified-admin-panel
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/tigerex_admin
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - mongodb
    networks:
      - tigerex-network

  # Alpha Market Trading Service
  alpha-market-trading:
    build:
      context: ./backend/alpha-market-trading
      dockerfile: Dockerfile
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/tigerex_alpha
    depends_on:
      - mongodb
    networks:
      - tigerex-network

  # P2P Service
  p2p-service:
    build:
      context: ./backend/p2p-service
      dockerfile: Dockerfile
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/tigerex_p2p
    depends_on:
      - mongodb
    networks:
      - tigerex-network

  # Notification Service Enhanced
  notification-service-enhanced:
    build:
      context: ./backend/notification-service-enhanced
      dockerfile: Dockerfile
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/tigerex_notifications
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    depends_on:
      - mongodb
      - redis
    networks:
      - tigerex-network

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    networks:
      - tigerex-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tigerex-network

  # PostgreSQL (for analytics)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=tigerex_analytics
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - tigerex-network

networks:
  tigerex-network:
    driver: bridge

volumes:
  mongodb_data:
  redis_data:
  postgres_data:

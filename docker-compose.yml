version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: tigerex
      POSTGRES_USER: tigerex
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-tigerex123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - tigerex-network

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - tigerex-network

  mongodb:
    image: mongo:6
    environment:
      MONGO_INITDB_ROOT_USERNAME: tigerex
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-mongo123}
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - tigerex-network

  influxdb:
    image: influxdb:2.7-alpine
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: tigerex
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUX_PASSWORD:-influx123}
      DOCKER_INFLUXDB_INIT_ORG: tigerex
      DOCKER_INFLUXDB_INIT_BUCKET: trading_data
    volumes:
      - influxdb_data:/var/lib/influxdb2
    ports:
      - "8086:8086"
    networks:
      - tigerex-network

  # Message Queue Services
  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks:
      - tigerex-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - tigerex-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: tigerex
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbit123}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - tigerex-network

  # Backend Services
  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://tigerex:${POSTGRES_PASSWORD:-tigerex123}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
    depends_on:
      - postgres
      - redis
    ports:
      - "3001:3000"
    networks:
      - tigerex-network

  trading-engine:
    build:
      context: ./backend/trading-engine
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://tigerex:${POSTGRES_PASSWORD:-tigerex123}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    ports:
      - "3002:3000"
    networks:
      - tigerex-network

  wallet-service:
    build:
      context: ./backend/wallet-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://tigerex:${POSTGRES_PASSWORD:-tigerex123}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
    depends_on:
      - postgres
      - redis
    ports:
      - "3003:3000"
    networks:
      - tigerex-network

  kyc-service:
    build:
      context: ./backend/kyc-service
      dockerfile: Dockerfile
    environment:
      - MONGO_URL=mongodb://tigerex:${MONGO_PASSWORD:-mongo123}@mongodb:27017/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
    depends_on:
      - mongodb
      - redis
    ports:
      - "3004:3000"
    networks:
      - tigerex-network

  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    environment:
      - RABBITMQ_URL=amqp://tigerex:${RABBITMQ_PASSWORD:-rabbit123}@rabbitmq:5672
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
    depends_on:
      - rabbitmq
      - redis
    ports:
      - "3005:3000"
    networks:
      - tigerex-network

  analytics-service:
    build:
      context: ./backend/analytics-service
      dockerfile: Dockerfile
    environment:
      - INFLUX_URL=http://influxdb:8086
      - INFLUX_TOKEN=${INFLUX_TOKEN:-your-influx-token}
      - INFLUX_ORG=tigerex
      - INFLUX_BUCKET=trading_data
    depends_on:
      - influxdb
    ports:
      - "3006:3000"
    networks:
      - tigerex-network

  admin-service:
    build:
      context: ./backend/admin-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://tigerex:${POSTGRES_PASSWORD:-tigerex123}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
    depends_on:
      - postgres
      - redis
    ports:
      - "3007:3000"
    networks:
      - tigerex-network

  blockchain-service:
    build:
      context: ./backend/blockchain-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://tigerex:${POSTGRES_PASSWORD:-tigerex123}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
    depends_on:
      - postgres
      - redis
    ports:
      - "3008:3000"
    networks:
      - tigerex-network

  p2p-service:
    build:
      context: ./backend/p2p-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://tigerex:${POSTGRES_PASSWORD:-tigerex123}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
    depends_on:
      - postgres
      - redis
    ports:
      - "3009:3000"
    networks:
      - tigerex-network

  copy-trading-service:
    build:
      context: ./backend/copy-trading-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://tigerex:${POSTGRES_PASSWORD:-tigerex123}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    ports:
      - "3010:3000"
    networks:
      - tigerex-network

  # Frontend Services
  web-app:
    build:
      context: ./frontend/web-app
      dockerfile: Dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_WS_URL=ws://localhost:8080
    ports:
      - "3000:3000"
    networks:
      - tigerex-network

  admin-dashboard:
    build:
      context: ./frontend/admin-dashboard
      dockerfile: Dockerfile
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_WS_URL=ws://localhost:8080
    ports:
      - "3100:3000"
    networks:
      - tigerex-network

  landing-pages:
    build:
      context: ./frontend/landing-pages
      dockerfile: Dockerfile
    ports:
      - "3200:3000"
    networks:
      - tigerex-network

  # API Gateway
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "8080:80"
      - "8443:443"
    depends_on:
      - auth-service
      - trading-engine
      - wallet-service
      - web-app
      - admin-dashboard
    networks:
      - tigerex-network

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - tigerex-network

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3300:3000"
    networks:
      - tigerex-network

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  influxdb_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  tigerex-network:
    driver: bridge
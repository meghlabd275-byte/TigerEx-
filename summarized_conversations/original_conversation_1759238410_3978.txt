{'role': 'assistant', 'content': 'Now let me create a comprehensive deployment guide and then prepare everything for GitHub:\n\n<function_calls>\n<create-file file_path="DEPLOYMENT_GUIDE.md">\n# TigerEx Platform - Complete Deployment Guide\n\nThis guide covers the deployment of all TigerEx platform components including backend services, frontend applications, mobile apps, and admin panel.\n\n---\n\n## Table of Contents\n\n1. [Prerequisites](#prerequisites)\n2. [Infrastructure Setup](#infrastructure-setup)\n3. [Backend Services Deployment](#backend-services-deployment)\n4. [Frontend Deployment](#frontend-deployment)\n5. [Mobile App Deployment](#mobile-app-deployment)\n6. [Admin Panel Deployment](#admin-panel-deployment)\n7. [Database Setup](#database-setup)\n8. [Monitoring & Logging](#monitoring--logging)\n9. [Security Configuration](#security-configuration)\n10. [Troubleshooting](#troubleshooting)\n\n---\n\n## Prerequisites\n\n### Required Software\n- Docker 24.0+\n- Docker Compose 2.20+\n- Kubernetes 1.28+ (for production)\n- Node.js 20.x\n- Python 3.11+\n- PostgreSQL 15+\n- Redis 7+\n- MongoDB 7+\n- Nginx 1.24+\n\n### Cloud Services (Recommended)\n- AWS / Google Cloud / Azure\n- CDN (CloudFlare / AWS CloudFront)\n- Object Storage (S3 / GCS)\n- Email Service (SendGrid / AWS SES)\n- SMS Service (Twilio)\n\n---\n\n## Infrastructure Setup\n\n### 1. Server Requirements\n\n#### Production Environment\n\n**Backend Services**\n- CPU: 8 cores minimum\n- RAM: 32GB minimum\n- Storage: 500GB SSD\n- Network: 1Gbps\n\n**Database Servers**\n- CPU: 16 cores\n- RAM: 64GB\n- Storage: 1TB NVMe SSD\n- IOPS: 10,000+\n\n**Load Balancers**\n- CPU: 4 cores\n- RAM: 8GB\n- Network: 10Gbps\n\n### 2. Network Configuration\n\n```nginx\n# /etc/nginx/nginx.conf\nupstream backend_api {\n    least_conn;\n    server backend1.tigerex.com:8000;\n    server backend2.tigerex.com:8000;\n    server backend3.tigerex.com:8000;\n}\n\nupstream websocket {\n    ip_hash;\n    server ws1.tigerex.com:8080;\n    server ws2.tigerex.com:8080;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name api.tigerex.com;\n\n    ssl_certificate /etc/ssl/certs/tigerex.crt;\n    ssl_certificate_key /etc/ssl/private/tigerex.key;\n\n    location / {\n        proxy_pass http://backend_api;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n\n    location /ws {\n        proxy_pass http://websocket;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection "upgrade";\n    }\n}\n```\n\n---\n\n## Backend Services Deployment\n\n### 1. Trading Bots Service\n\n```bash\ncd backend/trading-bots-service\n\n# Build Docker image\ndocker build -t tigerex/trading-bots:latest .\n\n# Run with Docker Compose\ndocker-compose up -d\n\n# Or deploy to Kubernetes\nkubectl apply -f k8s/trading-bots-deployment.yaml\n```\n\n**Environment Variables**:\n```env\nDATABASE_URL=postgresql://user:pass@localhost:5432/trading_bots\nREDIS_URL=redis://localhost:6379/0\nAPI_PORT=8001\nLOG_LEVEL=INFO\n```\n\n### 2. Unified Account Service\n\n```bash\ncd backend/unified-account-service\n\ndocker build -t tigerex/unified-account:latest .\ndocker-compose up -d\n```\n\n**Environment Variables**:\n```env\nDATABASE_URL=postgresql://user:pass@localhost:5432/unified_account\nAPI_PORT=8002\nLOG_LEVEL=INFO\n```\n\n### 3. Staking Service\n\n```bash\ncd backend/staking-service\n\ndocker build -t tigerex/staking:latest .\ndocker-compose up -d\n```\n\n**Environment Variables**:\n```env\nDATABASE_URL=postgresql://user:pass@localhost:5432/staking\nAPI_PORT=8003\nREWARD_DISTRIBUTION_INTERVAL=3600\nLOG_LEVEL=INFO\n```\n\n### 4. Launchpad Service\n\n```bash\ncd backend/launchpad-service\n\ndocker build -t tigerex/launchpad:latest .\ndocker-compose up -d\n```\n\n**Environment Variables**:\n```env\nDATABASE_URL=postgresql://user:pass@localhost:5432/launchpad\nAPI_PORT=8004\nKYC_SERVICE_URL=http://kyc-service:8005\nLOG_LEVEL=INFO\n```\n\n### Docker Compose for All Services\n\n```yaml\n# docker-compose.yml\nversion: \'3.8\'\n\nservices:\n  trading-bots:\n    image: tigerex/trading-bots:latest\n    ports:\n      - "8001:8001"\n    environment:\n      - DATABASE_URL=postgresql://tigerex:password@postgres:5432/trading_bots\n      - REDIS_URL=redis://redis:6379/0\n    depends_on:\n      - postgres\n      - redis\n\n  unified-account:\n    image: tigerex/unified-account:latest\n    ports:\n      - "8002:8002"\n    environment:\n      - DATABASE_URL=postgresql://tigerex:password@postgres:5432/unified_account\n    depends_on:\n      - postgres\n\n  staking:\n    image: tigerex/staking:latest\n    ports:\n      - "8003:8003"\n    environment:\n      - DATABASE_URL=postgresql://tigerex:password@postgres:5432/staking\n    depends_on:\n      - postgres\n\n  launchpad:\n    image: tigerex/launchpad:latest\n    ports:\n      - "8004:8004"\n    environment:\n      - DATABASE_URL=postgresql://tigerex:password@postgres:5432/launchpad\n    depends_on:\n      - postgres\n\n  postgres:\n    image: postgres:15\n    environment:\n      - POSTGRES_USER=tigerex\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\n  redis:\n    image: redis:7\n    volumes:\n      - redis_data:/data\n\nvolumes:\n  postgres_data:\n  redis_data:\n```\n\n---\n\n## Frontend Deployment\n\n### User Panel (Next.js)\n\n```bash\ncd frontend\n\n# Install dependencies\nnpm install\n\n# Build for production\nnpm run build\n\n# Start production server\nnpm start\n\n# Or deploy to Vercel\nvercel deploy --prod\n```\n\n**Environment Variables**:\n```env\nNEXT_PUBLIC_API_URL=https://api.tigerex.com\nNEXT_PUBLIC_WS_URL=wss://api.tigerex.com/ws\nNEXT_PUBLIC_SITE_URL=https://tigerex.com\n```\n\n### Static Deployment (Nginx)\n\n```nginx\nserver {\n    listen 443 ssl http2;\n    server_name tigerex.com;\n\n    root /var/www/tigerex/out;\n    index index.html;\n\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n\n    location /_next/static {\n        alias /var/www/tigerex/.next/static;\n        expires 1y;\n        access_log off;\n    }\n}\n```\n\n---\n\n## Mobile App Deployment\n\n### iOS Deployment\n\n1. **Build the app**:\n```bash\ncd mobile/TigerExApp\nexpo build:ios\n```\n\n2. **Configure App Store Connect**:\n   - Create app in App Store Connect\n   - Upload screenshots\n   - Set app metadata\n   - Submit for review\n\n3. **TestFlight Beta**:\n```bash\nexpo upload:ios\n```\n\n### Android Deployment\n\n1. **Build the app**:\n```bash\ncd mobile/TigerExApp\nexpo build:android\n```\n\n2. **Google Play Console**:\n   - Create app in Play Console\n   - Upload APK/AAB\n   - Set app metadata\n   - Submit for review\n\n3. **Internal Testing**:\n```bash\nexpo upload:android\n```\n\n### Over-the-Air Updates\n\n```bash\n# Publish update\nexpo publish\n\n# Rollback if needed\nexpo publish:rollback\n```\n\n---\n\n## Admin Panel Deployment\n\n```bash\ncd admin-panel\n\n# Install dependencies\nnpm install\n\n# Build for production\nnpm run build\n\n# Start production server\nnpm start\n\n# Or deploy to Vercel\nvercel deploy --prod\n```\n\n**Environment Variables**:\n```env\nNEXT_PUBLIC_API_URL=https://api.tigerex.com\nNEXT_PUBLIC_WS_URL=wss://api.tigerex.com/ws\nNEXTAUTH_URL=https://admin.tigerex.com\nNEXTAUTH_SECRET=your-secret-key\n```\n\n---\n\n## Database Setup\n\n### PostgreSQL Setup\n\n```sql\n-- Create databases\nCREATE DATABASE trading_bots;\nCREATE DATABASE unified_account;\nCREATE DATABASE staking;\nCREATE DATABASE launchpad;\n\n-- Create user\nCREATE USER tigerex WITH PASSWORD \'secure_password\';\n\n-- Grant privileges\nGRANT ALL PRIVILEGES ON DATABASE trading_bots TO tigerex;\nGRANT ALL PRIVILEGES ON DATABASE unified_account TO tigerex;\nGRANT ALL PRIVILEGES ON DATABASE staking TO tigerex;\nGRANT ALL PRIVILEGES ON DATABASE launchpad TO tigerex;\n```\n\n### Database Migration\n\n```bash\n# Trading Bots Service\ncd backend/trading-bots-service\nalembic upgrade head\n\n# Unified Account Service\ncd backend/unified-account-service\nalembic upgrade head\n\n# Staking Service\ncd backend/staking-service\nalembic upgrade head\n\n# Launchpad Service\ncd backend/launchpad-service\nalembic upgrade head\n```\n\n### Database Backup\n\n```bash\n# Automated backup script\n#!/bin/bash\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_DIR="/backups/postgres"\n\npg_dump -U tigerex trading_bots > $BACKUP_DIR/trading_bots_$DATE.sql\npg_dump -U tigerex unified_account > $BACKUP_DIR/unified_account_$DATE.sql\npg_dump -U tigerex staking > $BACKUP_DIR/staking_$DATE.sql\npg_dump -U tigerex launchpad > $BACKUP_DIR/launchpad_$DATE.sql\n\n# Upload to S3\naws s3 sync $BACKUP_DIR s3://tigerex-backups/postgres/\n```\n\n---\n\n## Monitoring & Logging\n\n### Prometheus Configuration\n\n```yaml\n# prometheus.yml\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: \'trading-bots\'\n    static_configs:\n      - targets: [\'localhost:8001\']\n\n  - job_name: \'unified-account\'\n    static_configs:\n      - targets: [\'localhost:8002\']\n\n  - job_name: \'staking\'\n    static_configs:\n      - targets: [\'localhost:8003\']\n\n  - job_name: \'launchpad\'\n    static_configs:\n      - targets: [\'localhost:8004\']\n```\n\n### Grafana Dashboards\n\nImport pre-built dashboards:\n- System Metrics\n- API Performance\n- Database Performance\n- User Activity\n- Trading Volume\n\n### ELK Stack (Logging)\n\n```yaml\n# docker-compose-elk.yml\nversion: \'3.8\'\n\nservices:\n  elasticsearch:\n    image: elasticsearch:8.11.0\n    environment:\n      - discovery.type=single-node\n    ports:\n      - "9200:9200"\n\n  logstash:\n    image: logstash:8.11.0\n    volumes:\n      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf\n\n  kibana:\n    image: kibana:8.11.0\n    ports:\n      - "5601:5601"\n    depends_on:\n      - elasticsearch\n```\n\n---\n\n## Security Configuration\n\n### SSL/TLS Setup\n\n```bash\n# Generate SSL certificate with Let\'s Encrypt\ncertbot certonly --nginx -d tigerex.com -d www.tigerex.com -d api.tigerex.com\n```\n\n### Firewall Rules\n\n```bash\n# UFW Configuration\nufw allow 22/tcp    # SSH\nufw allow 80/tcp    # HTTP\nufw allow 443/tcp   # HTTPS\nufw enable\n```\n\n### Security Headers\n\n```nginx\nadd_header X-Frame-Options "SAMEORIGIN" always;\nadd_header X-Content-Type-Options "nosniff" always;\nadd_header X-XSS-Protection "1; mode=block" always;\nadd_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;\n```\n\n---\n\n## Kubernetes Deployment (Production)\n\n### Trading Bots Service\n\n```yaml\n# k8s/trading-bots-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: trading-bots\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: trading-bots\n  template:\n    metadata:\n      labels:\n        app: trading-bots\n    spec:\n      containers:\n      - name: trading-bots\n        image: tigerex/trading-bots:latest\n        ports:\n        - containerPort: 8001\n        env:\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: db-secrets\n              key: trading-bots-url\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: trading-bots-service\nspec:\n  selector:\n    app: trading-bots\n  ports:\n  - port: 8001\n    targetPort: 8001\n  type: LoadBalancer\n```\n\n### Apply Kubernetes Configurations\n\n```bash\n# Create namespace\nkubectl create namespace tigerex\n\n# Apply configurations\nkubectl apply -f k8s/ -n tigerex\n\n# Check status\nkubectl get pods -n tigerex\nkubectl get services -n tigerex\n```\n\n---\n\n## CI/CD Pipeline\n\n### GitHub Actions\n\n```yaml\n# .github/workflows/deploy.yml\nname: Deploy to Production\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  deploy-backend:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: Build Docker images\n        run: |\n          docker build -t tigerex/trading-bots:${{ github.sha }} backend/trading-bots-service\n          docker build -t tigerex/unified-account:${{ github.sha }} backend/unified-account-service\n          docker build -t tigerex/staking:${{ github.sha }} backend/staking-service\n          docker build -t tigerex/launchpad:${{ github.sha }} backend/launchpad-service\n      \n      - name: Push to registry\n        run: |\n          docker push tigerex/trading-bots:${{ github.sha }}\n          docker push tigerex/unified-account:${{ github.sha }}\n          docker push tigerex/staking:${{ github.sha }}\n          docker push tigerex/launchpad:${{ github.sha }}\n      \n      - name: Deploy to Kubernetes\n        run: |\n          kubectl set image deployment/trading-bots trading-bots=tigerex/trading-bots:${{ github.sha }}\n          kubectl set image deployment/unified-account unified-account=tigerex/unified-account:${{ github.sha }}\n          kubectl set image deployment/staking staking=tigerex/staking:${{ github.sha }}\n          kubectl set image deployment/launchpad launchpad=tigerex/launchpad:${{ github.sha }}\n\n  deploy-frontend:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: Deploy to Vercel\n        run: |\n          cd frontend\n          vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}\n\n  deploy-admin:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: Deploy Admin Panel\n        run: |\n          cd admin-panel\n          vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}\n```\n\n---\n\n## Troubleshooting\n\n### Common Issues\n\n#### Service Not Starting\n```bash\n# Check logs\ndocker logs trading-bots-service\n\n# Check service status\nsystemctl status trading-bots\n\n# Restart service\ndocker-compose restart trading-bots\n```\n\n#### Database Connection Issues\n```bash\n# Test connection\npsql -h localhost -U tigerex -d trading_bots\n\n# Check PostgreSQL logs\ntail -f /var/log/postgresql/postgresql-15-main.log\n```\n\n#### High Memory Usage\n```bash\n# Check memory usage\nfree -h\ndocker stats\n\n# Restart services\ndocker-compose restart\n```\n\n---\n\n## Health Checks\n\n### Service Health Endpoints\n\n```bash\n# Trading Bots Service\ncurl http://localhost:8001/health\n\n# Unified Account Service\ncurl http://localhost:8002/health\n\n# Staking Service\ncurl http://localhost:8003/health\n\n# Launchpad Service\ncurl http://localhost:8004/health\n```\n\n### Automated Health Monitoring\n\n```bash\n#!/bin/bash\n# health-check.sh\n\nSERVICES=("8001" "8002" "8003" "8004")\n\nfor port in "${SERVICES[@]}"; do\n    response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$port/health)\n    if [ $response -eq 200 ]; then\n        echo "Service on port $port is healthy"\n    else\n        echo "Service on port $port is unhealthy"\n        # Send alert\n        curl -X POST https://alerts.tigerex.com/webhook \\\n          -d "Service on port $port is down"\n    fi\ndone\n```\n\n---\n\n## Scaling Guidelines\n\n### Horizontal Scaling\n\n```bash\n# Scale up\nkubectl scale deployment trading-bots --replicas=5\n\n# Auto-scaling\nkubectl autoscale deployment trading-bots --min=3 --max=10 --cpu-percent=80\n```\n\n### Database Scaling\n\n- Read replicas for read-heavy operations\n- Connection pooling (PgBouncer)\n- Partitioning for large tables\n- Caching with Redis\n\n---\n\n## Backup & Recovery\n\n### Automated Backup Script\n\n```bash\n#!/bin/bash\n# backup.sh\n\n# Database backup\npg_dump -U tigerex trading_bots | gzip > /backups/trading_bots_$(date +%Y%m%d).sql.gz\n\n# Upload to S3\naws s3 cp /backups/ s3://tigerex-backups/ --recursive\n\n# Cleanup old backups (keep 30 days)\nfind /backups -mtime +30 -delete\n```\n\n### Recovery Procedure\n\n```bash\n# Restore database\ngunzip < backup.sql.gz | psql -U tigerex trading_bots\n\n# Restore from S3\naws s3 cp s3://tigerex-backups/trading_bots_20241201.sql.gz .\ngunzip < trading_bots_20241201.sql.gz | psql -U tigerex trading_bots\n```\n\n---\n\n## Performance Tuning\n\n### PostgreSQL Optimization\n\n```sql\n-- postgresql.conf\nshared_buffers = 8GB\neffective_cache_size = 24GB\nmaintenance_work_mem = 2GB\ncheckpoint_completion_target = 0.9\nwal_buffers = 16MB\ndefault_statistics_target = 100\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nwork_mem = 52MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\nmax_worker_processes = 8\nmax_parallel_workers_per_gather = 4\nmax_parallel_workers = 8\n```\n\n### Redis Optimization\n\n```conf\n# redis.conf\nmaxmemory 4gb\nmaxmemory-policy allkeys-lru\nsave 900 1\nsave 300 10\nsave 60 10000\n```\n\n---\n\n## Support & Maintenance\n\n### Regular Maintenance Tasks\n\n- Daily: Check logs, monitor alerts\n- Weekly: Review performance metrics, update dependencies\n- Monthly: Security patches, database optimization\n- Quarterly: Disaster recovery testing, capacity planning\n\n### Contact Information\n\n- Technical Support: support@tigerex.com\n- Emergency: emergency@tigerex.com\n- Documentation: docs.tigerex.com\n\n---\n\n**Last Updated**: December 2024  \n**Version**: 2.0.0\n</create-file>\n</function_calls>'}
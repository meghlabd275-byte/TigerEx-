{'role': 'assistant', 'content': 'Now let me create all remaining admin panels efficiently. I\'ll create comprehensive implementations for each:\n\n<function_calls>\n<create-file file_path="backend/liquidity-aggregator-admin/src/main.py">\n"""\nTigerEx Liquidity Aggregator Admin Panel\nManages liquidity aggregation across multiple sources\nPort: 8118\n"""\n\nfrom fastapi import FastAPI, HTTPException, Depends\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel, Field\nfrom typing import List, Optional, Dict, Any\nfrom datetime import datetime, timedelta\nfrom enum import Enum\nimport uvicorn\nfrom sqlalchemy import create_engine, Column, Integer, String, Float, DateTime, Boolean, JSON\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, Session\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nDATABASE_URL = "postgresql://tigerex:tigerex123@localhost:5432/tigerex_liquidity_aggregator"\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\nclass SourceType(str, Enum):\n    CEX = "cex"\n    DEX = "dex"\n    MARKET_MAKER = "market_maker"\n    LIQUIDITY_POOL = "liquidity_pool"\n\nclass LiquiditySource(Base):\n    __tablename__ = "liquidity_sources"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, unique=True, index=True)\n    source_type = Column(String)\n    api_endpoint = Column(String)\n    is_enabled = Column(Boolean, default=True)\n    priority = Column(Integer, default=0)\n    weight = Column(Float, default=1.0)\n    total_liquidity = Column(Float, default=0.0)\n    avg_spread = Column(Float, default=0.0)\n    uptime_percentage = Column(Float, default=100.0)\n    response_time_ms = Column(Float, default=0.0)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    metadata = Column(JSON)\n\nclass AggregatedQuote(Base):\n    __tablename__ = "aggregated_quotes"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    token_in = Column(String, index=True)\n    token_out = Column(String, index=True)\n    amount_in = Column(Float)\n    best_amount_out = Column(Float)\n    best_source_id = Column(Integer)\n    sources_checked = Column(Integer)\n    avg_price = Column(Float)\n    price_variance = Column(Float)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    metadata = Column(JSON)\n\nBase.metadata.create_all(bind=engine)\n\nclass LiquiditySourceCreate(BaseModel):\n    name: str\n    source_type: SourceType\n    api_endpoint: str\n    priority: int = Field(ge=0, default=0)\n    weight: float = Field(ge=0, le=1, default=1.0)\n    metadata: Optional[Dict[str, Any]] = None\n\napp = FastAPI(title="TigerEx Liquidity Aggregator Admin API", version="1.0.0")\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=["*"],\n    allow_credentials=True,\n    allow_methods=["*"],\n    allow_headers=["*"],\n)\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n@app.post("/api/admin/sources", status_code=201)\nasync def create_source(source: LiquiditySourceCreate, db: Session = Depends(get_db)):\n    """Create a new liquidity source"""\n    try:\n        existing = db.query(LiquiditySource).filter(LiquiditySource.name == source.name).first()\n        if existing:\n            raise HTTPException(status_code=400, detail="Source already exists")\n        \n        db_source = LiquiditySource(**source.dict())\n        db.add(db_source)\n        db.commit()\n        db.refresh(db_source)\n        \n        logger.info(f"Created liquidity source: {source.name}")\n        return db_source\n    except HTTPException:\n        raise\n    except Exception as e:\n        db.rollback()\n        logger.error(f"Error creating source: {str(e)}")\n        raise HTTPException(status_code=500, detail=str(e))\n\n@app.get("/api/admin/sources")\nasync def get_sources(\n    skip: int = 0,\n    limit: int = 100,\n    source_type: Optional[SourceType] = None,\n    is_enabled: Optional[bool] = None,\n    db: Session = Depends(get_db)\n):\n    """Get all liquidity sources"""\n    try:\n        query = db.query(LiquiditySource)\n        \n        if source_type:\n            query = query.filter(LiquiditySource.source_type == source_type)\n        if is_enabled is not None:\n            query = query.filter(LiquiditySource.is_enabled == is_enabled)\n        \n        total = query.count()\n        sources = query.order_by(LiquiditySource.priority.desc()).offset(skip).limit(limit).all()\n        \n        return {"total": total, "sources": sources}\n    except Exception as e:\n        logger.error(f"Error fetching sources: {str(e)}")\n        raise HTTPException(status_code=500, detail=str(e))\n\n@app.get("/api/admin/analytics/overview")\nasync def get_analytics_overview(db: Session = Depends(get_db)):\n    """Get liquidity aggregator analytics"""\n    try:\n        total_sources = db.query(LiquiditySource).count()\n        active_sources = db.query(LiquiditySource).filter(LiquiditySource.is_enabled == True).count()\n        total_liquidity = db.query(LiquiditySource).with_entities(\n            db.func.sum(LiquiditySource.total_liquidity)\n        ).scalar() or 0.0\n        \n        avg_spread = db.query(LiquiditySource).filter(\n            LiquiditySource.is_enabled == True\n        ).with_entities(db.func.avg(LiquiditySource.avg_spread)).scalar() or 0.0\n        \n        return {\n            "total_sources": total_sources,\n            "active_sources": active_sources,\n            "total_liquidity": total_liquidity,\n            "avg_spread": avg_spread\n        }\n    except Exception as e:\n        logger.error(f"Error fetching analytics: {str(e)}")\n        raise HTTPException(status_code=500, detail=str(e))\n\n@app.get("/health")\nasync def health_check():\n    return {"status": "healthy", "service": "liquidity-aggregator-admin"}\n\nif __name__ == "__main__":\n    uvicorn.run(app, host="0.0.0.0", port=8118)\n</create-file>\n</function_calls>'}
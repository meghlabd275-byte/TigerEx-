{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="desktop-apps/main.js">\n/**\n * TigerEx Desktop Application - Main Process\n * Cross-platform desktop application for Windows, macOS, and Linux\n */\n\nconst { app, BrowserWindow, ipcMain, Menu, Tray, dialog, shell } = require(\'electron\');\nconst path = require(\'path\');\nconst Store = require(\'electron-store\');\nconst axios = require(\'axios\');\n\n// Initialize electron-store for persistent data\nconst store = new Store();\n\n// Global variables\nlet mainWindow;\nlet tray;\nconst API_BASE_URL = process.env.API_URL || \'https://api.tigerex.com\';\n\n// App configuration\nconst APP_CONFIG = {\n  name: \'TigerEx\',\n  version: \'1.0.0\',\n  minWidth: 1200,\n  minHeight: 800,\n  defaultWidth: 1400,\n  defaultHeight: 900\n};\n\n/**\n * Create the main application window\n */\nfunction createMainWindow() {\n  // Get saved window bounds or use defaults\n  const windowBounds = store.get(\'windowBounds\', {\n    width: APP_CONFIG.defaultWidth,\n    height: APP_CONFIG.defaultHeight\n  });\n\n  mainWindow = new BrowserWindow({\n    width: windowBounds.width,\n    height: windowBounds.height,\n    minWidth: APP_CONFIG.minWidth,\n    minHeight: APP_CONFIG.minHeight,\n    title: APP_CONFIG.name,\n    icon: path.join(__dirname, \'assets\', \'icon.png\'),\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n      preload: path.join(__dirname, \'preload.js\')\n    },\n    backgroundColor: \'#1a1a2e\',\n    show: false // Don\'t show until ready\n  });\n\n  // Load the application\n  if (process.env.NODE_ENV === \'development\') {\n    mainWindow.loadURL(\'http://localhost:3000\');\n    mainWindow.webContents.openDevTools();\n  } else {\n    mainWindow.loadFile(path.join(__dirname, \'renderer\', \'index.html\'));\n  }\n\n  // Show window when ready\n  mainWindow.once(\'ready-to-show\', () => {\n    mainWindow.show();\n  });\n\n  // Save window bounds on resize/move\n  mainWindow.on(\'resize\', () => {\n    store.set(\'windowBounds\', mainWindow.getBounds());\n  });\n\n  mainWindow.on(\'move\', () => {\n    store.set(\'windowBounds\', mainWindow.getBounds());\n  });\n\n  // Handle window close\n  mainWindow.on(\'close\', (event) => {\n    if (!app.isQuitting) {\n      event.preventDefault();\n      mainWindow.hide();\n    }\n  });\n\n  mainWindow.on(\'closed\', () => {\n    mainWindow = null;\n  });\n\n  // Create application menu\n  createMenu();\n}\n\n/**\n * Create system tray icon\n */\nfunction createTray() {\n  tray = new Tray(path.join(__dirname, \'assets\', \'tray-icon.png\'));\n  \n  const contextMenu = Menu.buildFromTemplate([\n    {\n      label: \'Show TigerEx\',\n      click: () => {\n        mainWindow.show();\n      }\n    },\n    {\n      label: \'Markets\',\n      click: () => {\n        mainWindow.show();\n        mainWindow.webContents.send(\'navigate\', \'/markets\');\n      }\n    },\n    {\n      label: \'Portfolio\',\n      click: () => {\n        mainWindow.show();\n        mainWindow.webContents.send(\'navigate\', \'/portfolio\');\n      }\n    },\n    { type: \'separator\' },\n    {\n      label: \'Settings\',\n      click: () => {\n        mainWindow.show();\n        mainWindow.webContents.send(\'navigate\', \'/settings\');\n      }\n    },\n    { type: \'separator\' },\n    {\n      label: \'Quit\',\n      click: () => {\n        app.isQuitting = true;\n        app.quit();\n      }\n    }\n  ]);\n\n  tray.setToolTip(\'TigerEx - Cryptocurrency Exchange\');\n  tray.setContextMenu(contextMenu);\n\n  tray.on(\'click\', () => {\n    mainWindow.isVisible() ? mainWindow.hide() : mainWindow.show();\n  });\n}\n\n/**\n * Create application menu\n */\nfunction createMenu() {\n  const template = [\n    {\n      label: \'File\',\n      submenu: [\n        {\n          label: \'New Order\',\n          accelerator: \'CmdOrCtrl+N\',\n          click: () => {\n            mainWindow.webContents.send(\'open-order-dialog\');\n          }\n        },\n        { type: \'separator\' },\n        {\n          label: \'Settings\',\n          accelerator: \'CmdOrCtrl+,\',\n          click: () => {\n            mainWindow.webContents.send(\'navigate\', \'/settings\');\n          }\n        },\n        { type: \'separator\' },\n        {\n          label: \'Exit\',\n          accelerator: \'CmdOrCtrl+Q\',\n          click: () => {\n            app.isQuitting = true;\n            app.quit();\n          }\n        }\n      ]\n    },\n    {\n      label: \'View\',\n      submenu: [\n        {\n          label: \'Markets\',\n          accelerator: \'CmdOrCtrl+1\',\n          click: () => {\n            mainWindow.webContents.send(\'navigate\', \'/markets\');\n          }\n        },\n        {\n          label: \'Trading\',\n          accelerator: \'CmdOrCtrl+2\',\n          click: () => {\n            mainWindow.webContents.send(\'navigate\', \'/trading\');\n          }\n        },\n        {\n          label: \'Portfolio\',\n          accelerator: \'CmdOrCtrl+3\',\n          click: () => {\n            mainWindow.webContents.send(\'navigate\', \'/portfolio\');\n          }\n        },\n        {\n          label: \'Wallet\',\n          accelerator: \'CmdOrCtrl+4\',\n          click: () => {\n            mainWindow.webContents.send(\'navigate\', \'/wallet\');\n          }\n        },\n        { type: \'separator\' },\n        { role: \'reload\' },\n        { role: \'forceReload\' },\n        { role: \'toggleDevTools\' },\n        { type: \'separator\' },\n        { role: \'resetZoom\' },\n        { role: \'zoomIn\' },\n        { role: \'zoomOut\' },\n        { type: \'separator\' },\n        { role: \'togglefullscreen\' }\n      ]\n    },\n    {\n      label: \'Trading\',\n      submenu: [\n        {\n          label: \'Spot Trading\',\n          click: () => {\n            mainWindow.webContents.send(\'navigate\', \'/trading/spot\');\n          }\n        },\n        {\n          label: \'Futures Trading\',\n          click: () => {\n            mainWindow.webContents.send(\'navigate\', \'/trading/futures\');\n          }\n        },\n        {\n          label: \'Options Trading\',\n          click: () => {\n            mainWindow.webContents.send(\'navigate\', \'/trading/options\');\n          }\n        },\n        { type: \'separator\' },\n        {\n          label: \'Order History\',\n          click: () => {\n            mainWindow.webContents.send(\'navigate\', \'/orders\');\n          }\n        },\n        {\n          label: \'Trade History\',\n          click: () => {\n            mainWindow.webContents.send(\'navigate\', \'/trades\');\n          }\n        }\n      ]\n    },\n    {\n      label: \'Help\',\n      submenu: [\n        {\n          label: \'Documentation\',\n          click: async () => {\n            await shell.openExternal(\'https://docs.tigerex.com\');\n          }\n        },\n        {\n          label: \'API Documentation\',\n          click: async () => {\n            await shell.openExternal(\'https://docs.tigerex.com/api\');\n          }\n        },\n        { type: \'separator\' },\n        {\n          label: \'Support\',\n          click: async () => {\n            await shell.openExternal(\'https://support.tigerex.com\');\n          }\n        },\n        {\n          label: \'Report Issue\',\n          click: async () => {\n            await shell.openExternal(\'https://github.com/tigerex/issues\');\n          }\n        },\n        { type: \'separator\' },\n        {\n          label: \'About\',\n          click: () => {\n            dialog.showMessageBox(mainWindow, {\n              type: \'info\',\n              title: \'About TigerEx\',\n              message: `TigerEx Desktop v${APP_CONFIG.version}`,\n              detail: \'Professional Cryptocurrency Exchange Platform\\n\\nÂ© 2025 TigerEx. All rights reserved.\',\n              buttons: [\'OK\']\n            });\n          }\n        }\n      ]\n    }\n  ];\n\n  const menu = Menu.buildFromTemplate(template);\n  Menu.setApplicationMenu(menu);\n}\n\n/**\n * IPC Handlers\n */\n\n// Get stored data\nipcMain.handle(\'store-get\', (event, key) => {\n  return store.get(key);\n});\n\n// Set stored data\nipcMain.handle(\'store-set\', (event, key, value) => {\n  store.set(key, value);\n  return true;\n});\n\n// Delete stored data\nipcMain.handle(\'store-delete\', (event, key) => {\n  store.delete(key);\n  return true;\n});\n\n// API request handler\nipcMain.handle(\'api-request\', async (event, { method, endpoint, data, headers }) => {\n  try {\n    const response = await axios({\n      method,\n      url: `${API_BASE_URL}${endpoint}`,\n      data,\n      headers: {\n        \'Content-Type\': \'application/json\',\n        ...headers\n      }\n    });\n    return { success: true, data: response.data };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.response?.data || error.message\n    };\n  }\n});\n\n// Open external link\nipcMain.handle(\'open-external\', async (event, url) => {\n  await shell.openExternal(url);\n});\n\n// Show notification\nipcMain.handle(\'show-notification\', (event, { title, body }) => {\n  const notification = new Notification({\n    title,\n    body,\n    icon: path.join(__dirname, \'assets\', \'icon.png\')\n  });\n  notification.show();\n});\n\n// Get app version\nipcMain.handle(\'get-app-version\', () => {\n  return APP_CONFIG.version;\n});\n\n/**\n * App lifecycle events\n */\n\napp.whenReady().then(() => {\n  createMainWindow();\n  createTray();\n\n  app.on(\'activate\', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createMainWindow();\n    } else {\n      mainWindow.show();\n    }\n  });\n});\n\napp.on(\'window-all-closed\', () => {\n  if (process.platform !== \'darwin\') {\n    app.quit();\n  }\n});\n\napp.on(\'before-quit\', () => {\n  app.isQuitting = true;\n});\n\n// Handle uncaught exceptions\nprocess.on(\'uncaughtException\', (error) => {\n  console.error(\'Uncaught Exception:\', error);\n  dialog.showErrorBox(\'Error\', `An unexpected error occurred: ${error.message}`);\n});\n\n// Auto-updater (for production)\nif (process.env.NODE_ENV === \'production\') {\n  // Implement auto-updater logic here\n  // Example: electron-updater\n}\n</create-file>\n</function_calls>'}
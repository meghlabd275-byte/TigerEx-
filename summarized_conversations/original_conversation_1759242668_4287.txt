{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="backend/institutional-services-admin/src/main.py">\n"""\nTigerEx Institutional Services Admin Panel\nManages institutional clients, OTC trading, and custody services\nPort: 8120\n"""\n\nfrom fastapi import FastAPI, HTTPException, Depends\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel, Field\nfrom typing import List, Optional, Dict, Any\nfrom datetime import datetime\nfrom enum import Enum\nimport uvicorn\nfrom sqlalchemy import create_engine, Column, Integer, String, Float, DateTime, Boolean, JSON, Text\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, Session\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nDATABASE_URL = "postgresql://tigerex:tigerex123@localhost:5432/tigerex_institutional"\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\nclass ClientTier(str, Enum):\n    STANDARD = "standard"\n    PREMIUM = "premium"\n    ENTERPRISE = "enterprise"\n    VIP = "vip"\n\nclass ClientStatus(str, Enum):\n    PENDING = "pending"\n    ACTIVE = "active"\n    SUSPENDED = "suspended"\n    CLOSED = "closed"\n\nclass InstitutionalClient(Base):\n    __tablename__ = "institutional_clients"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    company_name = Column(String, unique=True, index=True)\n    legal_entity = Column(String)\n    registration_number = Column(String)\n    country = Column(String)\n    tier = Column(String, default="standard")\n    status = Column(String, default="pending")\n    \n    # Contact info\n    primary_contact_name = Column(String)\n    primary_contact_email = Column(String)\n    primary_contact_phone = Column(String)\n    \n    # Trading limits\n    daily_trading_limit = Column(Float, default=0.0)\n    monthly_trading_limit = Column(Float, default=0.0)\n    otc_min_trade_size = Column(Float, default=100000.0)\n    \n    # Fees\n    trading_fee_percentage = Column(Float, default=0.1)\n    custody_fee_percentage = Column(Float, default=0.05)\n    \n    # Stats\n    total_trading_volume = Column(Float, default=0.0)\n    total_custody_aum = Column(Float, default=0.0)\n    total_otc_trades = Column(Integer, default=0)\n    \n    # Verification\n    kyc_verified = Column(Boolean, default=False)\n    aml_verified = Column(Boolean, default=False)\n    \n    onboarded_at = Column(DateTime, default=datetime.utcnow)\n    last_active = Column(DateTime, default=datetime.utcnow)\n    metadata = Column(JSON)\n\nclass OTCTrade(Base):\n    __tablename__ = "otc_trades"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    client_id = Column(Integer, index=True)\n    trade_type = Column(String)  # buy, sell\n    base_currency = Column(String)\n    quote_currency = Column(String)\n    amount = Column(Float)\n    price = Column(Float)\n    total_value = Column(Float)\n    status = Column(String, default="pending")\n    settlement_date = Column(DateTime, nullable=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    completed_at = Column(DateTime, nullable=True)\n    metadata = Column(JSON)\n\nclass CustodyAccount(Base):\n    __tablename__ = "custody_accounts"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    client_id = Column(Integer, index=True)\n    account_number = Column(String, unique=True, index=True)\n    account_type = Column(String)  # hot, cold, warm\n    total_value_usd = Column(Float, default=0.0)\n    is_active = Column(Boolean, default=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    metadata = Column(JSON)\n\nBase.metadata.create_all(bind=engine)\n\nclass InstitutionalClientCreate(BaseModel):\n    company_name: str\n    legal_entity: str\n    registration_number: str\n    country: str\n    tier: ClientTier = ClientTier.STANDARD\n    primary_contact_name: str\n    primary_contact_email: str\n    primary_contact_phone: str\n    daily_trading_limit: float = Field(ge=0, default=0.0)\n    monthly_trading_limit: float = Field(ge=0, default=0.0)\n    otc_min_trade_size: float = Field(ge=0, default=100000.0)\n    trading_fee_percentage: float = Field(ge=0, le=1, default=0.1)\n    custody_fee_percentage: float = Field(ge=0, le=1, default=0.05)\n    metadata: Optional[Dict[str, Any]] = None\n\nclass InstitutionalClientUpdate(BaseModel):\n    tier: Optional[ClientTier] = None\n    status: Optional[ClientStatus] = None\n    daily_trading_limit: Optional[float] = None\n    monthly_trading_limit: Optional[float] = None\n    trading_fee_percentage: Optional[float] = None\n    custody_fee_percentage: Optional[float] = None\n    kyc_verified: Optional[bool] = None\n    aml_verified: Optional[bool] = None\n    metadata: Optional[Dict[str, Any]] = None\n\napp = FastAPI(title="TigerEx Institutional Services Admin API", version="1.0.0")\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=["*"],\n    allow_credentials=True,\n    allow_methods=["*"],\n    allow_headers=["*"],\n)\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n@app.post("/api/admin/clients", status_code=201)\nasync def create_client(client: InstitutionalClientCreate, db: Session = Depends(get_db)):\n    """Create a new institutional client"""\n    try:\n        existing = db.query(InstitutionalClient).filter(\n            InstitutionalClient.company_name == client.company_name\n        ).first()\n        if existing:\n            raise HTTPException(status_code=400, detail="Client already exists")\n        \n        db_client = InstitutionalClient(**client.dict())\n        db.add(db_client)\n        db.commit()\n        db.refresh(db_client)\n        \n        logger.info(f"Created institutional client: {client.company_name}")\n        return db_client\n    except HTTPException:\n        raise\n    except Exception as e:\n        db.rollback()\n        logger.error(f"Error creating client: {str(e)}")\n        raise HTTPException(status_code=500, detail=str(e))\n\n@app.get("/api/admin/clients")\nasync def get_clients(\n    skip: int = 0,\n    limit: int = 100,\n    tier: Optional[ClientTier] = None,\n    status: Optional[ClientStatus] = None,\n    kyc_verified: Optional[bool] = None,\n    db: Session = Depends(get_db)\n):\n    """Get all institutional clients"""\n    try:\n        query = db.query(InstitutionalClient)\n        \n        if tier:\n            query = query.filter(InstitutionalClient.tier == tier)\n        if status:\n            query = query.filter(InstitutionalClient.status == status)\n        if kyc_verified is not None:\n            query = query.filter(InstitutionalClient.kyc_verified == kyc_verified)\n        \n        total = query.count()\n        clients = query.order_by(InstitutionalClient.total_trading_volume.desc()).offset(skip).limit(limit).all()\n        \n        return {"total": total, "clients": clients}\n    except Exception as e:\n        logger.error(f"Error fetching clients: {str(e)}")\n        raise HTTPException(status_code=500, detail=str(e))\n\n@app.put("/api/admin/clients/{client_id}")\nasync def update_client(\n    client_id: int,\n    client_update: InstitutionalClientUpdate,\n    db: Session = Depends(get_db)\n):\n    """Update an institutional client"""\n    try:\n        client = db.query(InstitutionalClient).filter(InstitutionalClient.id == client_id).first()\n        if not client:\n            raise HTTPException(status_code=404, detail="Client not found")\n        \n        update_data = client_update.dict(exclude_unset=True)\n        for field, value in update_data.items():\n            setattr(client, field, value)\n        \n        client.last_active = datetime.utcnow()\n        db.commit()\n        db.refresh(client)\n        \n        logger.info(f"Updated client: {client_id}")\n        return client\n    except HTTPException:\n        raise\n    except Exception as e:\n        db.rollback()\n        logger.error(f"Error updating client: {str(e)}")\n        raise HTTPException(status_code=500, detail=str(e))\n\n@app.get("/api/admin/analytics/overview")\nasync def get_analytics_overview(db: Session = Depends(get_db)):\n    """Get institutional services analytics"""\n    try:\n        total_clients = db.query(InstitutionalClient).count()\n        active_clients = db.query(InstitutionalClient).filter(\n            InstitutionalClient.status == "active"\n        ).count()\n        total_trading_volume = db.query(InstitutionalClient).with_entities(\n            db.func.sum(InstitutionalClient.total_trading_volume)\n        ).scalar() or 0.0\n        total_custody_aum = db.query(InstitutionalClient).with_entities(\n            db.func.sum(InstitutionalClient.total_custody_aum)\n        ).scalar() or 0.0\n        total_otc_trades = db.query(OTCTrade).count()\n        \n        return {\n            "total_clients": total_clients,\n            "active_clients": active_clients,\n            "total_trading_volume": total_trading_volume,\n            "total_custody_aum": total_custody_aum,\n            "total_otc_trades": total_otc_trades\n        }\n    except Exception as e:\n        logger.error(f"Error fetching analytics: {str(e)}")\n        raise HTTPException(status_code=500, detail=str(e))\n\n@app.get("/health")\nasync def health_check():\n    return {"status": "healthy", "service": "institutional-services-admin"}\n\nif __name__ == "__main__":\n    uvicorn.run(app, host="0.0.0.0", port=8120)\n</create-file>\n</function_calls>'}
{'role': 'assistant', 'content': 'Now let me create a deployment guide and update the todo:\n\n<function_calls>\n<create-file file_path="DEPLOYMENT_GUIDE.md">\n# TigerEx Platform - Deployment Guide\n\n## ðŸ“‹ Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Backend Services Deployment](#backend-services-deployment)\n3. [Desktop Applications Distribution](#desktop-applications-distribution)\n4. [Database Setup](#database-setup)\n5. [Environment Configuration](#environment-configuration)\n6. [Monitoring & Logging](#monitoring--logging)\n7. [Security Considerations](#security-considerations)\n\n---\n\n## Prerequisites\n\n### System Requirements\n- **OS**: Ubuntu 20.04+ / Debian 11+ / CentOS 8+\n- **CPU**: 8+ cores recommended\n- **RAM**: 32GB+ recommended\n- **Storage**: 500GB+ SSD\n- **Network**: 1Gbps+ connection\n\n### Software Requirements\n- Docker 24.0+\n- Docker Compose 2.20+\n- PostgreSQL 14+\n- Redis 7+\n- Nginx 1.24+\n- Node.js 20+ (for some services)\n- Python 3.11+ (for Python services)\n\n---\n\n## Backend Services Deployment\n\n### 1. Clone Repository\n```bash\ngit clone https://github.com/tigerex/platform.git\ncd platform\n```\n\n### 2. Build Docker Images\n\n**Build all services:**\n```bash\n#!/bin/bash\nservices=(\n  "alpha-market-admin"\n  "copy-trading-admin"\n  "dex-integration-admin"\n  "liquidity-aggregator-admin"\n  "nft-marketplace-admin"\n  "institutional-services-admin"\n  "lending-borrowing-admin"\n  "payment-gateway-admin"\n  "payment-gateway-service"\n  "advanced-trading-service"\n  "defi-enhancements-service"\n)\n\nfor service in "${services[@]}"; do\n  echo "Building $service..."\n  cd backend/$service\n  docker build -t tigerex/$service:latest .\n  cd ../..\ndone\n```\n\n### 3. Create Docker Compose File\n\n**docker-compose.yml:**\n```yaml\nversion: \'3.8\'\n\nservices:\n  # PostgreSQL Database\n  postgres:\n    image: postgres:14\n    environment:\n      POSTGRES_USER: tigerex\n      POSTGRES_PASSWORD: ${DB_PASSWORD}\n      POSTGRES_DB: tigerex\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - "5432:5432"\n    restart: always\n\n  # Redis Cache\n  redis:\n    image: redis:7-alpine\n    ports:\n      - "6379:6379"\n    restart: always\n\n  # Alpha Market Admin\n  alpha-market-admin:\n    image: tigerex/alpha-market-admin:latest\n    environment:\n      DATABASE_URL: postgresql://tigerex:${DB_PASSWORD}@postgres:5432/tigerex_alpha_market\n    ports:\n      - "8115:8115"\n    depends_on:\n      - postgres\n    restart: always\n\n  # Copy Trading Admin\n  copy-trading-admin:\n    image: tigerex/copy-trading-admin:latest\n    environment:\n      DATABASE_URL: postgresql://tigerex:${DB_PASSWORD}@postgres:5432/tigerex_copy_trading\n    ports:\n      - "8116:8116"\n    depends_on:\n      - postgres\n    restart: always\n\n  # DEX Integration Admin\n  dex-integration-admin:\n    image: tigerex/dex-integration-admin:latest\n    environment:\n      DATABASE_URL: postgresql://tigerex:${DB_PASSWORD}@postgres:5432/tigerex_dex_integration\n    ports:\n      - "8117:8117"\n    depends_on:\n      - postgres\n    restart: always\n\n  # Liquidity Aggregator Admin\n  liquidity-aggregator-admin:\n    image: tigerex/liquidity-aggregator-admin:latest\n    environment:\n      DATABASE_URL: postgresql://tigerex:${DB_PASSWORD}@postgres:5432/tigerex_liquidity_aggregator\n    ports:\n      - "8118:8118"\n    depends_on:\n      - postgres\n    restart: always\n\n  # NFT Marketplace Admin\n  nft-marketplace-admin:\n    image: tigerex/nft-marketplace-admin:latest\n    environment:\n      DATABASE_URL: postgresql://tigerex:${DB_PASSWORD}@postgres:5432/tigerex_nft_marketplace\n    ports:\n      - "8119:8119"\n    depends_on:\n      - postgres\n    restart: always\n\n  # Institutional Services Admin\n  institutional-services-admin:\n    image: tigerex/institutional-services-admin:latest\n    environment:\n      DATABASE_URL: postgresql://tigerex:${DB_PASSWORD}@postgres:5432/tigerex_institutional\n    ports:\n      - "8120:8120"\n    depends_on:\n      - postgres\n    restart: always\n\n  # Lending & Borrowing Admin\n  lending-borrowing-admin:\n    image: tigerex/lending-borrowing-admin:latest\n    environment:\n      DATABASE_URL: postgresql://tigerex:${DB_PASSWORD}@postgres:5432/tigerex_lending_borrowing\n    ports:\n      - "8121:8121"\n    depends_on:\n      - postgres\n    restart: always\n\n  # Payment Gateway Admin\n  payment-gateway-admin:\n    image: tigerex/payment-gateway-admin:latest\n    environment:\n      DATABASE_URL: postgresql://tigerex:${DB_PASSWORD}@postgres:5432/tigerex_payment_gateway\n    ports:\n      - "8122:8122"\n    depends_on:\n      - postgres\n    restart: always\n\n  # Payment Gateway Service\n  payment-gateway-service:\n    image: tigerex/payment-gateway-service:latest\n    environment:\n      DATABASE_URL: postgresql://tigerex:${DB_PASSWORD}@postgres:5432/tigerex_payment_gateway\n      STRIPE_API_KEY: ${STRIPE_API_KEY}\n      ADYEN_API_KEY: ${ADYEN_API_KEY}\n    ports:\n      - "8123:8123"\n    depends_on:\n      - postgres\n    restart: always\n\n  # Advanced Trading Service\n  advanced-trading-service:\n    image: tigerex/advanced-trading-service:latest\n    environment:\n      DATABASE_URL: postgresql://tigerex:${DB_PASSWORD}@postgres:5432/tigerex_advanced_trading\n    ports:\n      - "8124:8124"\n    depends_on:\n      - postgres\n    restart: always\n\n  # DeFi Enhancements Service\n  defi-enhancements-service:\n    image: tigerex/defi-enhancements-service:latest\n    environment:\n      DATABASE_URL: postgresql://tigerex:${DB_PASSWORD}@postgres:5432/tigerex_defi_enhancements\n    ports:\n      - "8125:8125"\n    depends_on:\n      - postgres\n    restart: always\n\n  # Nginx Reverse Proxy\n  nginx:\n    image: nginx:alpine\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./ssl:/etc/nginx/ssl:ro\n    ports:\n      - "80:80"\n      - "443:443"\n    depends_on:\n      - alpha-market-admin\n      - copy-trading-admin\n      - payment-gateway-service\n      - advanced-trading-service\n    restart: always\n\nvolumes:\n  postgres_data:\n```\n\n### 4. Environment Configuration\n\n**Create .env file:**\n```bash\n# Database\nDB_PASSWORD=your_secure_password_here\n\n# Payment Providers\nSTRIPE_API_KEY=sk_live_xxx\nSTRIPE_WEBHOOK_SECRET=whsec_xxx\nADYEN_API_KEY=your_adyen_key\nSQUARE_ACCESS_TOKEN=your_square_token\nBRAINTREE_MERCHANT_ID=your_merchant_id\nRAZORPAY_KEY_ID=your_razorpay_key\n\n# API Keys\nJWT_SECRET=your_jwt_secret_here\nAPI_KEY_SALT=your_api_key_salt\n\n# External Services\nREDIS_URL=redis://redis:6379\nELASTICSEARCH_URL=http://elasticsearch:9200\n\n# Monitoring\nSENTRY_DSN=your_sentry_dsn\nDATADOG_API_KEY=your_datadog_key\n```\n\n### 5. Start Services\n\n```bash\n# Start all services\ndocker-compose up -d\n\n# Check service status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f\n\n# Stop services\ndocker-compose down\n```\n\n---\n\n## Database Setup\n\n### 1. Create Databases\n\n```bash\n# Connect to PostgreSQL\ndocker exec -it tigerex_postgres psql -U tigerex\n\n# Create databases\nCREATE DATABASE tigerex_alpha_market;\nCREATE DATABASE tigerex_copy_trading;\nCREATE DATABASE tigerex_dex_integration;\nCREATE DATABASE tigerex_liquidity_aggregator;\nCREATE DATABASE tigerex_nft_marketplace;\nCREATE DATABASE tigerex_institutional;\nCREATE DATABASE tigerex_lending_borrowing;\nCREATE DATABASE tigerex_payment_gateway;\nCREATE DATABASE tigerex_advanced_trading;\nCREATE DATABASE tigerex_defi_enhancements;\n```\n\n### 2. Run Migrations\n\n```bash\n# Each service will auto-create tables on first run\n# Or run migrations manually:\ndocker-compose exec alpha-market-admin python -c "from main import Base, engine; Base.metadata.create_all(engine)"\n```\n\n---\n\n## Desktop Applications Distribution\n\n### 1. Build Desktop Apps\n\n```bash\ncd desktop-apps\n\n# Install dependencies\nnpm install\n\n# Build for all platforms\nnpm run build\n\n# Or build for specific platform\nnpm run build:win    # Windows\nnpm run build:mac    # macOS\nnpm run build:linux  # Linux\n```\n\n### 2. Distribution Files\n\n**Windows:**\n- `dist/TigerEx Setup.exe` - Installer\n- `dist/TigerEx Portable.exe` - Portable version\n\n**macOS:**\n- `dist/TigerEx.dmg` - DMG installer\n- `dist/TigerEx-mac.zip` - ZIP archive\n\n**Linux:**\n- `dist/TigerEx.AppImage` - AppImage (portable)\n- `dist/tigerex.deb` - Debian package\n- `dist/tigerex.rpm` - RPM package\n\n### 3. Code Signing (Production)\n\n**Windows:**\n```bash\n# Sign with certificate\nsigntool sign /f certificate.pfx /p password /t http://timestamp.digicert.com "dist/TigerEx Setup.exe"\n```\n\n**macOS:**\n```bash\n# Sign and notarize\ncodesign --deep --force --verify --verbose --sign "Developer ID Application" "dist/TigerEx.app"\nxcrun notarytool submit "dist/TigerEx.dmg" --keychain-profile "AC_PASSWORD"\n```\n\n---\n\n## Nginx Configuration\n\n**nginx.conf:**\n```nginx\nevents {\n    worker_connections 4096;\n}\n\nhttp {\n    upstream alpha_market {\n        server alpha-market-admin:8115;\n    }\n\n    upstream copy_trading {\n        server copy-trading-admin:8116;\n    }\n\n    upstream payment_gateway {\n        server payment-gateway-service:8123;\n    }\n\n    upstream advanced_trading {\n        server advanced-trading-service:8124;\n    }\n\n    server {\n        listen 80;\n        server_name api.tigerex.com;\n        return 301 https://$server_name$request_uri;\n    }\n\n    server {\n        listen 443 ssl http2;\n        server_name api.tigerex.com;\n\n        ssl_certificate /etc/nginx/ssl/cert.pem;\n        ssl_certificate_key /etc/nginx/ssl/key.pem;\n\n        # Alpha Market Admin\n        location /api/admin/alpha-market/ {\n            proxy_pass http://alpha_market/api/admin/;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n        }\n\n        # Copy Trading Admin\n        location /api/admin/copy-trading/ {\n            proxy_pass http://copy_trading/api/admin/;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n        }\n\n        # Payment Gateway\n        location /api/payments/ {\n            proxy_pass http://payment_gateway/api/;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n        }\n\n        # Advanced Trading\n        location /api/trading/ {\n            proxy_pass http://advanced_trading/api/;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n        }\n    }\n}\n```\n\n---\n\n## Monitoring & Logging\n\n### 1. Health Checks\n\n```bash\n# Check all services\nfor port in {8115..8125}; do\n  curl -f http://localhost:$port/health || echo "Service on port $port is down"\ndone\n```\n\n### 2. Prometheus Metrics\n\nAdd to each service:\n```python\nfrom prometheus_client import Counter, Histogram, generate_latest\n\nrequest_count = Counter(\'requests_total\', \'Total requests\')\nrequest_duration = Histogram(\'request_duration_seconds\', \'Request duration\')\n\n@app.get("/metrics")\nasync def metrics():\n    return Response(generate_latest(), media_type="text/plain")\n```\n\n### 3. Centralized Logging\n\n**docker-compose.yml addition:**\n```yaml\n  elasticsearch:\n    image: elasticsearch:8.11.0\n    environment:\n      - discovery.type=single-node\n    ports:\n      - "9200:9200"\n\n  kibana:\n    image: kibana:8.11.0\n    ports:\n      - "5601:5601"\n    depends_on:\n      - elasticsearch\n```\n\n---\n\n## Security Considerations\n\n### 1. SSL/TLS Configuration\n\n```bash\n# Generate SSL certificate\ncertbot certonly --standalone -d api.tigerex.com\n```\n\n### 2. Firewall Rules\n\n```bash\n# Allow only necessary ports\nufw allow 80/tcp\nufw allow 443/tcp\nufw allow 22/tcp\nufw enable\n```\n\n### 3. Database Security\n\n```sql\n-- Create read-only user\nCREATE USER tigerex_readonly WITH PASSWORD \'password\';\nGRANT CONNECT ON DATABASE tigerex TO tigerex_readonly;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO tigerex_readonly;\n```\n\n### 4. API Rate Limiting\n\nConfigure in Nginx:\n```nginx\nlimit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/m;\n\nlocation /api/ {\n    limit_req zone=api_limit burst=20 nodelay;\n}\n```\n\n---\n\n## Backup & Recovery\n\n### 1. Database Backup\n\n```bash\n# Automated daily backup\n0 2 * * * docker exec tigerex_postgres pg_dumpall -U tigerex | gzip > /backups/tigerex_$(date +\\%Y\\%m\\%d).sql.gz\n```\n\n### 2. Restore Database\n\n```bash\ngunzip -c backup.sql.gz | docker exec -i tigerex_postgres psql -U tigerex\n```\n\n---\n\n## Scaling\n\n### 1. Horizontal Scaling\n\n```yaml\n# docker-compose.yml\nservices:\n  payment-gateway-service:\n    image: tigerex/payment-gateway-service:latest\n    deploy:\n      replicas: 3\n```\n\n### 2. Load Balancing\n\n```nginx\nupstream payment_gateway {\n    least_conn;\n    server payment-gateway-1:8123;\n    server payment-gateway-2:8123;\n    server payment-gateway-3:8123;\n}\n```\n\n---\n\n## Troubleshooting\n\n### Common Issues\n\n**Service won\'t start:**\n```bash\n# Check logs\ndocker-compose logs service-name\n\n# Check database connection\ndocker-compose exec service-name python -c "from sqlalchemy import create_engine; engine = create_engine(\'postgresql://...\'); engine.connect()"\n```\n\n**High memory usage:**\n```bash\n# Check resource usage\ndocker stats\n\n# Limit container resources\ndocker-compose.yml:\n  services:\n    service-name:\n      mem_limit: 2g\n      cpus: 2\n```\n\n---\n\n## Production Checklist\n\n- [ ] SSL certificates installed\n- [ ] Environment variables configured\n- [ ] Database backups automated\n- [ ] Monitoring setup (Prometheus/Grafana)\n- [ ] Logging configured (ELK stack)\n- [ ] Firewall rules configured\n- [ ] Rate limiting enabled\n- [ ] Health checks configured\n- [ ] Auto-restart enabled\n- [ ] Documentation updated\n\n---\n\n## Support\n\nFor deployment support:\n- **Documentation**: https://docs.tigerex.com/deployment\n- **Support**: https://support.tigerex.com\n- **Discord**: https://discord.gg/tigerex\n\n---\n\n**Last Updated**: January 15, 2025\n</create-file>\n</function_calls>'}
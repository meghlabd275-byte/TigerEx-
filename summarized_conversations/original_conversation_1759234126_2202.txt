{'role': 'assistant', 'content': 'Now let me create a comprehensive P2P trading page:\n\n<function_calls>\n<create-file file_path="tigerex/src/pages/user/p2p.tsx">\nimport React, { useState } from \'react\';\nimport {\n  Box,\n  Container,\n  Grid,\n  Paper,\n  Typography,\n  Button,\n  Tabs,\n  Tab,\n  TextField,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Chip,\n  Avatar,\n  Card,\n  CardContent,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Rating,\n  Stepper,\n  Step,\n  StepLabel,\n  Alert,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  IconButton,\n  InputAdornment,\n} from \'@mui/material\';\nimport {\n  Search,\n  FilterList,\n  Add,\n  TrendingUp,\n  TrendingDown,\n  CheckCircle,\n  Schedule,\n  Cancel,\n  Message,\n  AttachFile,\n  Send,\n  Star,\n  VerifiedUser,\n  Shield,\n} from \'@mui/icons-material\';\n\ninterface P2POffer {\n  id: string;\n  merchant: {\n    name: string;\n    rating: number;\n    trades: number;\n    completionRate: number;\n    verified: boolean;\n  };\n  type: \'buy\' | \'sell\';\n  asset: string;\n  fiat: string;\n  price: number;\n  available: number;\n  limits: {\n    min: number;\n    max: number;\n  };\n  paymentMethods: string[];\n  timeLimit: number;\n}\n\ninterface P2POrder {\n  id: string;\n  type: \'buy\' | \'sell\';\n  asset: string;\n  amount: number;\n  price: number;\n  total: number;\n  status: \'pending\' | \'paid\' | \'completed\' | \'cancelled\' | \'disputed\';\n  merchant: string;\n  paymentMethod: string;\n  createdAt: string;\n  timeRemaining: string;\n}\n\nconst P2PPage: React.FC = () => {\n  const [tabValue, setTabValue] = useState(0);\n  const [tradeType, setTradeType] = useState<\'buy\' | \'sell\'>(\'buy\');\n  const [selectedAsset, setSelectedAsset] = useState(\'USDT\');\n  const [selectedFiat, setSelectedFiat] = useState(\'USD\');\n  const [orderDialogOpen, setOrderDialogOpen] = useState(false);\n  const [selectedOffer, setSelectedOffer] = useState<P2POffer | null>(null);\n  const [orderStep, setOrderStep] = useState(0);\n  const [chatOpen, setChatOpen] = useState(false);\n\n  // Mock data\n  const [offers, setOffers] = useState<P2POffer[]>([\n    {\n      id: \'1\',\n      merchant: {\n        name: \'CryptoKing\',\n        rating: 4.9,\n        trades: 1250,\n        completionRate: 98.5,\n        verified: true,\n      },\n      type: \'sell\',\n      asset: \'USDT\',\n      fiat: \'USD\',\n      price: 1.002,\n      available: 50000,\n      limits: { min: 100, max: 10000 },\n      paymentMethods: [\'Bank Transfer\', \'PayPal\', \'Wise\'],\n      timeLimit: 15,\n    },\n    {\n      id: \'2\',\n      merchant: {\n        name: \'TradeMaster\',\n        rating: 4.8,\n        trades: 890,\n        completionRate: 97.2,\n        verified: true,\n      },\n      type: \'sell\',\n      asset: \'USDT\',\n      fiat: \'USD\',\n      price: 1.001,\n      available: 25000,\n      limits: { min: 50, max: 5000 },\n      paymentMethods: [\'Bank Transfer\', \'Zelle\'],\n      timeLimit: 30,\n    },\n    {\n      id: \'3\',\n      merchant: {\n        name: \'QuickTrade\',\n        rating: 4.7,\n        trades: 650,\n        completionRate: 96.8,\n        verified: false,\n      },\n      type: \'sell\',\n      asset: \'USDT\',\n      fiat: \'USD\',\n      price: 1.003,\n      available: 15000,\n      limits: { min: 200, max: 8000 },\n      paymentMethods: [\'Bank Transfer\', \'Cash App\'],\n      timeLimit: 20,\n    },\n  ]);\n\n  const [myOrders, setMyOrders] = useState<P2POrder[]>([\n    {\n      id: \'ORD001\',\n      type: \'buy\',\n      asset: \'USDT\',\n      amount: 1000,\n      price: 1.002,\n      total: 1002,\n      status: \'pending\',\n      merchant: \'CryptoKing\',\n      paymentMethod: \'Bank Transfer\',\n      createdAt: \'2024-01-15 10:30:00\',\n      timeRemaining: \'14:35\',\n    },\n    {\n      id: \'ORD002\',\n      type: \'sell\',\n      asset: \'USDT\',\n      amount: 500,\n      price: 1.001,\n      total: 500.5,\n      status: \'completed\',\n      merchant: \'TradeMaster\',\n      paymentMethod: \'PayPal\',\n      createdAt: \'2024-01-14 15:20:00\',\n      timeRemaining: \'-\',\n    },\n  ]);\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const handleOpenOrder = (offer: P2POffer) => {\n    setSelectedOffer(offer);\n    setOrderDialogOpen(true);\n    setOrderStep(0);\n  };\n\n  const handleNextStep = () => {\n    setOrderStep((prev) => prev + 1);\n  };\n\n  const handleBackStep = () => {\n    setOrderStep((prev) => prev - 1);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \'completed\':\n        return \'success\';\n      case \'pending\':\n      case \'paid\':\n        return \'warning\';\n      case \'cancelled\':\n      case \'disputed\':\n        return \'error\';\n      default:\n        return \'default\';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \'completed\':\n        return <CheckCircle />;\n      case \'pending\':\n      case \'paid\':\n        return <Schedule />;\n      case \'cancelled\':\n      case \'disputed\':\n        return <Cancel />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Container maxWidth="xl" sx={{ mt: 4, mb: 4 }}>\n      {/* Header */}\n      <Box sx={{ mb: 4 }}>\n        <Typography variant="h4" fontWeight="bold" gutterBottom>\n          P2P Trading\n        </Typography>\n        <Typography variant="body2" color="text.secondary">\n          Trade crypto directly with other users. Zero fees, multiple payment methods.\n        </Typography>\n      </Box>\n\n      {/* Quick Stats */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant="body2" color="text.secondary" gutterBottom>\n                24h Volume\n              </Typography>\n              <Typography variant="h5" fontWeight="bold">\n                $2.5M\n              </Typography>\n              <Chip label="+12.5%" size="small" color="success" icon={<TrendingUp />} sx={{ mt: 1 }} />\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant="body2" color="text.secondary" gutterBottom>\n                Active Offers\n              </Typography>\n              <Typography variant="h5" fontWeight="bold">\n                1,234\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant="body2" color="text.secondary" gutterBottom>\n                Avg. Completion Time\n              </Typography>\n              <Typography variant="h5" fontWeight="bold">\n                8 min\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant="body2" color="text.secondary" gutterBottom>\n                Success Rate\n              </Typography>\n              <Typography variant="h5" fontWeight="bold">\n                98.5%\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Main Content */}\n      <Paper sx={{ mb: 4 }}>\n        <Tabs value={tabValue} onChange={handleTabChange} sx={{ borderBottom: 1, borderColor: \'divider\' }}>\n          <Tab label="Buy Crypto" />\n          <Tab label="Sell Crypto" />\n          <Tab label="My Orders" />\n          <Tab label="My Ads" />\n        </Tabs>\n\n        {/* Buy/Sell Tab */}\n        {(tabValue === 0 || tabValue === 1) && (\n          <Box sx={{ p: 3 }}>\n            {/* Filters */}\n            <Grid container spacing={2} sx={{ mb: 3 }}>\n              <Grid item xs={12} sm={6} md={2}>\n                <FormControl fullWidth size="small">\n                  <InputLabel>Asset</InputLabel>\n                  <Select value={selectedAsset} onChange={(e) => setSelectedAsset(e.target.value)} label="Asset">\n                    <MenuItem value="USDT">USDT</MenuItem>\n                    <MenuItem value="BTC">BTC</MenuItem>\n                    <MenuItem value="ETH">ETH</MenuItem>\n                    <MenuItem value="BNB">BNB</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6} md={2}>\n                <FormControl fullWidth size="small">\n                  <InputLabel>Fiat</InputLabel>\n                  <Select value={selectedFiat} onChange={(e) => setSelectedFiat(e.target.value)} label="Fiat">\n                    <MenuItem value="USD">USD</MenuItem>\n                    <MenuItem value="EUR">EUR</MenuItem>\n                    <MenuItem value="GBP">GBP</MenuItem>\n                    <MenuItem value="INR">INR</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6} md={2}>\n                <FormControl fullWidth size="small">\n                  <InputLabel>Payment</InputLabel>\n                  <Select label="Payment">\n                    <MenuItem value="all">All Payments</MenuItem>\n                    <MenuItem value="bank">Bank Transfer</MenuItem>\n                    <MenuItem value="paypal">PayPal</MenuItem>\n                    <MenuItem value="wise">Wise</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6} md={2}>\n                <TextField\n                  fullWidth\n                  size="small"\n                  label="Amount"\n                  type="number"\n                  placeholder="Enter amount"\n                />\n              </Grid>\n              <Grid item xs={12} sm={6} md={2}>\n                <Button fullWidth variant="outlined" startIcon={<FilterList />} sx={{ height: \'40px\' }}>\n                  More Filters\n                </Button>\n              </Grid>\n              <Grid item xs={12} sm={6} md={2}>\n                <Button fullWidth variant="contained" startIcon={<Add />} sx={{ height: \'40px\' }}>\n                  Post Ad\n                </Button>\n              </Grid>\n            </Grid>\n\n            {/* Offers List */}\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Merchant</TableCell>\n                    <TableCell align="right">Price</TableCell>\n                    <TableCell align="right">Available</TableCell>\n                    <TableCell align="right">Limits</TableCell>\n                    <TableCell>Payment Methods</TableCell>\n                    <TableCell align="center">Time Limit</TableCell>\n                    <TableCell align="right">Action</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {offers.map((offer) => (\n                    <TableRow key={offer.id} hover>\n                      <TableCell>\n                        <Box sx={{ display: \'flex\', alignItems: \'center\' }}>\n                          <Avatar sx={{ width: 40, height: 40, mr: 2 }}>\n                            {offer.merchant.name[0]}\n                          </Avatar>\n                          <Box>\n                            <Box sx={{ display: \'flex\', alignItems: \'center\', gap: 0.5 }}>\n                              <Typography variant="body2" fontWeight="bold">\n                                {offer.merchant.name}\n                              </Typography>\n                              {offer.merchant.verified && (\n                                <VerifiedUser sx={{ fontSize: 16, color: \'primary.main\' }} />\n                              )}\n                            </Box>\n                            <Box sx={{ display: \'flex\', alignItems: \'center\', gap: 1 }}>\n                              <Rating value={offer.merchant.rating} precision={0.1} size="small" readOnly />\n                              <Typography variant="caption" color="text.secondary">\n                                {offer.merchant.trades} trades\n                              </Typography>\n                            </Box>\n                            <Typography variant="caption" color="success.main">\n                              {offer.merchant.completionRate}% completion\n                            </Typography>\n                          </Box>\n                        </Box>\n                      </TableCell>\n                      <TableCell align="right">\n                        <Typography variant="body2" fontWeight="bold">\n                          ${offer.price.toFixed(3)}\n                        </Typography>\n                      </TableCell>\n                      <TableCell align="right">\n                        <Typography variant="body2">\n                          {offer.available.toLocaleString()} {offer.asset}\n                        </Typography>\n                      </TableCell>\n                      <TableCell align="right">\n                        <Typography variant="body2">\n                          ${offer.limits.min} - ${offer.limits.max.toLocaleString()}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Box sx={{ display: \'flex\', flexWrap: \'wrap\', gap: 0.5 }}>\n                          {offer.paymentMethods.map((method, index) => (\n                            <Chip key={index} label={method} size="small" variant="outlined" />\n                          ))}\n                        </Box>\n                      </TableCell>\n                      <TableCell align="center">\n                        <Chip label={`${offer.timeLimit} min`} size="small" />\n                      </TableCell>\n                      <TableCell align="right">\n                        <Button\n                          variant="contained"\n                          color={tabValue === 0 ? \'success\' : \'error\'}\n                          onClick={() => handleOpenOrder(offer)}\n                        >\n                          {tabValue === 0 ? \'Buy\' : \'Sell\'} {offer.asset}\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Box>\n        )}\n\n        {/* My Orders Tab */}\n        {tabValue === 2 && (\n          <Box sx={{ p: 3 }}>\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Order ID</TableCell>\n                    <TableCell>Type</TableCell>\n                    <TableCell>Asset</TableCell>\n                    <TableCell align="right">Amount</TableCell>\n                    <TableCell align="right">Price</TableCell>\n                    <TableCell align="right">Total</TableCell>\n                    <TableCell>Merchant</TableCell>\n                    <TableCell>Status</TableCell>\n                    <TableCell>Time Remaining</TableCell>\n                    <TableCell align="right">Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {myOrders.map((order) => (\n                    <TableRow key={order.id} hover>\n                      <TableCell>\n                        <Typography variant="body2" fontWeight="bold">\n                          {order.id}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Chip\n                          label={order.type.toUpperCase()}\n                          size="small"\n                          color={order.type === \'buy\' ? \'success\' : \'error\'}\n                        />\n                      </TableCell>\n                      <TableCell>{order.asset}</TableCell>\n                      <TableCell align="right">{order.amount.toLocaleString()}</TableCell>\n                      <TableCell align="right">${order.price.toFixed(3)}</TableCell>\n                      <TableCell align="right">\n                        <Typography variant="body2" fontWeight="bold">\n                          ${order.total.toFixed(2)}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>{order.merchant}</TableCell>\n                      <TableCell>\n                        <Chip\n                          label={order.status}\n                          size="small"\n                          color={getStatusColor(order.status) as any}\n                          icon={getStatusIcon(order.status)}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Typography variant="body2" color={order.status === \'pending\' ? \'error.main\' : \'text.secondary\'}>\n                          {order.timeRemaining}\n                        </Typography>\n                      </TableCell>\n                      <TableCell align="right">\n                        {order.status === \'pending\' && (\n                          <>\n                            <Button size="small" variant="outlined" sx={{ mr: 1 }} onClick={() => setChatOpen(true)}>\n                              Chat\n                            </Button>\n                            <Button size="small" variant="contained">\n                              Mark as Paid\n                            </Button>\n                          </>\n                        )}\n                        {order.status === \'completed\' && (\n                          <Button size="small" variant="outlined">\n                            View Details\n                          </Button>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Box>\n        )}\n\n        {/* My Ads Tab */}\n        {tabValue === 3 && (\n          <Box sx={{ p: 3 }}>\n            <Alert severity="info" sx={{ mb: 3 }}>\n              Create your own P2P ads to buy or sell crypto at your preferred price and payment methods.\n            </Alert>\n            <Button variant="contained" startIcon={<Add />} size="large">\n              Create New Ad\n            </Button>\n          </Box>\n        )}\n      </Paper>\n\n      {/* Order Dialog */}\n      <Dialog open={orderDialogOpen} onClose={() => setOrderDialogOpen(false)} maxWidth="md" fullWidth>\n        <DialogTitle>\n          {tabValue === 0 ? \'Buy\' : \'Sell\'} {selectedOffer?.asset}\n        </DialogTitle>\n        <DialogContent>\n          <Stepper activeStep={orderStep} sx={{ mt: 2, mb: 4 }}>\n            <Step>\n              <StepLabel>Order Details</StepLabel>\n            </Step>\n            <Step>\n              <StepLabel>Payment</StepLabel>\n            </Step>\n            <Step>\n              <StepLabel>Confirmation</StepLabel>\n            </Step>\n          </Stepper>\n\n          {orderStep === 0 && selectedOffer && (\n            <Box>\n              {/* Merchant Info */}\n              <Paper sx={{ p: 2, mb: 3, bgcolor: \'background.default\' }}>\n                <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\n                  <Avatar sx={{ width: 50, height: 50, mr: 2 }}>\n                    {selectedOffer.merchant.name[0]}\n                  </Avatar>\n                  <Box sx={{ flex: 1 }}>\n                    <Box sx={{ display: \'flex\', alignItems: \'center\', gap: 0.5 }}>\n                      <Typography variant="h6">{selectedOffer.merchant.name}</Typography>\n                      {selectedOffer.merchant.verified && (\n                        <VerifiedUser sx={{ fontSize: 20, color: \'primary.main\' }} />\n                      )}\n                    </Box>\n                    <Box sx={{ display: \'flex\', alignItems: \'center\', gap: 2 }}>\n                      <Rating value={selectedOffer.merchant.rating} precision={0.1} size="small" readOnly />\n                      <Typography variant="caption">\n                        {selectedOffer.merchant.trades} trades • {selectedOffer.merchant.completionRate}% completion\n                      </Typography>\n                    </Box>\n                  </Box>\n                </Box>\n              </Paper>\n\n              {/* Order Form */}\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    label="I want to pay"\n                    type="number"\n                    InputProps={{\n                      endAdornment: <InputAdornment position="end">{selectedOffer.fiat}</InputAdornment>,\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    label="I will receive"\n                    type="number"\n                    InputProps={{\n                      endAdornment: <InputAdornment position="end">{selectedOffer.asset}</InputAdornment>,\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <FormControl fullWidth>\n                    <InputLabel>Payment Method</InputLabel>\n                    <Select label="Payment Method">\n                      {selectedOffer.paymentMethods.map((method, index) => (\n                        <MenuItem key={index} value={method}>\n                          {method}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n              </Grid>\n\n              <Alert severity="info" sx={{ mt: 3 }}>\n                <Typography variant="body2">\n                  • Price: ${selectedOffer.price.toFixed(3)} per {selectedOffer.asset}\n                  <br />\n                  • Limits: ${selectedOffer.limits.min} - ${selectedOffer.limits.max.toLocaleString()}\n                  <br />\n                  • Time limit: {selectedOffer.timeLimit} minutes\n                  <br />• Available: {selectedOffer.available.toLocaleString()} {selectedOffer.asset}\n                </Typography>\n              </Alert>\n            </Box>\n          )}\n\n          {orderStep === 1 && (\n            <Box>\n              <Alert severity="warning" sx={{ mb: 3 }}>\n                Please transfer the payment to the merchant\'s account details below within the time limit.\n              </Alert>\n\n              <Paper sx={{ p: 3, bgcolor: \'background.default\', mb: 3 }}>\n                <Typography variant="h6" gutterBottom>\n                  Payment Details\n                </Typography>\n                <Grid container spacing={2}>\n                  <Grid item xs={6}>\n                    <Typography variant="body2" color="text.secondary">\n                      Bank Name\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="body2">Chase Bank</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="body2" color="text.secondary">\n                      Account Name\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="body2">John Doe</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="body2" color="text.secondary">\n                      Account Number\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="body2">1234567890</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="body2" color="text.secondary">\n                      Reference\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="body2" fontWeight="bold">\n                      P2P-ORD001\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Paper>\n\n              <TextField\n                fullWidth\n                multiline\n                rows={3}\n                label="Payment Notes (Optional)"\n                placeholder="Add any notes about your payment"\n                sx={{ mb: 2 }}\n              />\n\n              <Button variant="outlined" startIcon={<AttachFile />} fullWidth>\n                Upload Payment Proof\n              </Button>\n            </Box>\n          )}\n\n          {orderStep === 2 && (\n            <Box>\n              <Alert severity="success" sx={{ mb: 3 }}>\n                Your order has been created successfully!\n              </Alert>\n\n              <Paper sx={{ p: 3, bgcolor: \'background.default\' }}>\n                <Typography variant="h6" gutterBottom>\n                  Order Summary\n                </Typography>\n                <Grid container spacing={2}>\n                  <Grid item xs={6}>\n                    <Typography variant="body2" color="text.secondary">\n                      Order ID\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="body2" fontWeight="bold">\n                      ORD001\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="body2" color="text.secondary">\n                      Type\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Chip label={tabValue === 0 ? \'BUY\' : \'SELL\'} size="small" color="primary" />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="body2" color="text.secondary">\n                      Amount\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="body2">1000 USDT</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="body2" color="text.secondary">\n                      Total\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="body2" fontWeight="bold">\n                      $1,002.00\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="body2" color="text.secondary">\n                      Status\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Chip label="Pending Payment" size="small" color="warning" />\n                  </Grid>\n                </Grid>\n              </Paper>\n\n              <Alert severity="info" sx={{ mt: 3 }}>\n                Please complete the payment within 15 minutes and mark the order as paid. The crypto will be released\n                after the merchant confirms receipt.\n              </Alert>\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOrderDialogOpen(false)}>Cancel</Button>\n          {orderStep > 0 && <Button onClick={handleBackStep}>Back</Button>}\n          {orderStep < 2 ? (\n            <Button variant="contained" onClick={handleNextStep}>\n              Next\n            </Button>\n          ) : (\n            <Button variant="contained" onClick={() => setOrderDialogOpen(false)}>\n              Go to My Orders\n            </Button>\n          )}\n        </DialogActions>\n      </Dialog>\n\n      {/* Chat Dialog */}\n      <Dialog open={chatOpen} onClose={() => setChatOpen(false)} maxWidth="sm" fullWidth>\n        <DialogTitle>\n          <Box sx={{ display: \'flex\', alignItems: \'center\', justifyContent: \'space-between\' }}>\n            <Box sx={{ display: \'flex\', alignItems: \'center\' }}>\n              <Avatar sx={{ mr: 2 }}>C</Avatar>\n              <Box>\n                <Typography variant="h6">CryptoKing</Typography>\n                <Typography variant="caption" color="success.main">\n                  Online\n                </Typography>\n              </Box>\n            </Box>\n            <IconButton onClick={() => setChatOpen(false)}>\n              <Cancel />\n            </IconButton>\n          </Box>\n        </DialogTitle>\n        <DialogContent>\n          <Box sx={{ height: 400, overflowY: \'auto\', mb: 2 }}>\n            <List>\n              <ListItem>\n                <ListItemText\n                  primary="Hello! I\'ve sent the payment."\n                  secondary="10:30 AM"\n                  sx={{ textAlign: \'right\' }}\n                />\n              </ListItem>\n              <ListItem>\n                <ListItemText primary="Great! I\'ll check and release the crypto shortly." secondary="10:32 AM" />\n              </ListItem>\n            </List>\n          </Box>\n          <Box sx={{ display: \'flex\', gap: 1 }}>\n            <TextField fullWidth size="small" placeholder="Type a message..." />\n            <IconButton color="primary">\n              <AttachFile />\n            </IconButton>\n            <IconButton color="primary">\n              <Send />\n            </IconButton>\n          </Box>\n        </DialogContent>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default P2PPage;\n</create-file>\n</function_calls>'}
{'role': 'assistant', 'content': 'Due to the extensive scope of this project, let me create a comprehensive summary document and push all the changes to the repository. Let me first create a few more critical pages and then commit everything.\n\nLet me create a staking/earn page:\n\n<function_calls>\n<create-file file_path="tigerex/src/pages/user/earn.tsx">\nimport React, { useState } from \'react\';\nimport {\n  Box,\n  Container,\n  Grid,\n  Paper,\n  Typography,\n  Card,\n  CardContent,\n  Button,\n  Tabs,\n  Tab,\n  TextField,\n  Chip,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  LinearProgress,\n  Avatar,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  InputAdornment,\n  Divider,\n  List,\n  ListItem,\n  ListItemText,\n  IconButton,\n  Tooltip,\n} from \'@mui/material\';\nimport {\n  TrendingUp,\n  AccountBalance,\n  Lock,\n  LockOpen,\n  Info,\n  Add,\n  Remove,\n  History,\n  Calculate,\n  CheckCircle,\n  Schedule,\n} from \'@mui/icons-material\';\n\ninterface StakingProduct {\n  id: string;\n  asset: string;\n  type: \'flexible\' | \'locked\';\n  apy: number;\n  duration?: number;\n  minAmount: number;\n  totalStaked: number;\n  available: number;\n  icon: string;\n}\n\ninterface UserStaking {\n  id: string;\n  asset: string;\n  amount: number;\n  apy: number;\n  type: \'flexible\' | \'locked\';\n  startDate: string;\n  endDate?: string;\n  earned: number;\n  status: \'active\' | \'completed\' | \'pending\';\n}\n\nconst EarnPage: React.FC = () => {\n  const [tabValue, setTabValue] = useState(0);\n  const [stakeDialogOpen, setStakeDialogOpen] = useState(false);\n  const [selectedProduct, setSelectedProduct] = useState<StakingProduct | null>(null);\n  const [stakeAmount, setStakeAmount] = useState(\'\');\n  const [calculatedReward, setCalculatedReward] = useState(0);\n\n  // Mock data\n  const [stakingProducts, setStakingProducts] = useState<StakingProduct[]>([\n    {\n      id: \'1\',\n      asset: \'BTC\',\n      type: \'flexible\',\n      apy: 5.2,\n      minAmount: 0.001,\n      totalStaked: 1250.5,\n      available: 500,\n      icon: \'/icons/btc.png\',\n    },\n    {\n      id: \'2\',\n      asset: \'BTC\',\n      type: \'locked\',\n      apy: 8.5,\n      duration: 30,\n      minAmount: 0.01,\n      totalStaked: 850.3,\n      available: 300,\n      icon: \'/icons/btc.png\',\n    },\n    {\n      id: \'3\',\n      asset: \'ETH\',\n      type: \'flexible\',\n      apy: 4.8,\n      minAmount: 0.01,\n      totalStaked: 8500.2,\n      available: 3000,\n      icon: \'/icons/eth.png\',\n    },\n    {\n      id: \'4\',\n      asset: \'ETH\',\n      type: \'locked\',\n      apy: 12.5,\n      duration: 90,\n      minAmount: 0.1,\n      totalStaked: 5200.8,\n      available: 2000,\n      icon: \'/icons/eth.png\',\n    },\n    {\n      id: \'5\',\n      asset: \'USDT\',\n      type: \'flexible\',\n      apy: 8.0,\n      minAmount: 10,\n      totalStaked: 2500000,\n      available: 1000000,\n      icon: \'/icons/usdt.png\',\n    },\n    {\n      id: \'6\',\n      asset: \'USDT\',\n      type: \'locked\',\n      apy: 15.0,\n      duration: 60,\n      minAmount: 100,\n      totalStaked: 1800000,\n      available: 500000,\n      icon: \'/icons/usdt.png\',\n    },\n  ]);\n\n  const [userStakings, setUserStakings] = useState<UserStaking[]>([\n    {\n      id: \'1\',\n      asset: \'BTC\',\n      amount: 0.5,\n      apy: 5.2,\n      type: \'flexible\',\n      startDate: \'2024-01-01\',\n      earned: 0.0026,\n      status: \'active\',\n    },\n    {\n      id: \'2\',\n      asset: \'ETH\',\n      amount: 5.0,\n      apy: 12.5,\n      type: \'locked\',\n      startDate: \'2024-01-15\',\n      endDate: \'2024-04-15\',\n      earned: 0.156,\n      status: \'active\',\n    },\n    {\n      id: \'3\',\n      asset: \'USDT\',\n      amount: 10000,\n      apy: 8.0,\n      type: \'flexible\',\n      startDate: \'2024-02-01\',\n      earned: 65.75,\n      status: \'active\',\n    },\n  ]);\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const handleStake = (product: StakingProduct) => {\n    setSelectedProduct(product);\n    setStakeDialogOpen(true);\n    setStakeAmount(\'\');\n    setCalculatedReward(0);\n  };\n\n  const calculateReward = (amount: number, apy: number, days: number = 365) => {\n    return (amount * apy * days) / (100 * 365);\n  };\n\n  const handleAmountChange = (value: string) => {\n    setStakeAmount(value);\n    if (selectedProduct && value) {\n      const amount = parseFloat(value);\n      const days = selectedProduct.duration || 365;\n      const reward = calculateReward(amount, selectedProduct.apy, days);\n      setCalculatedReward(reward);\n    } else {\n      setCalculatedReward(0);\n    }\n  };\n\n  const totalStaked = userStakings.reduce((sum, stake) => sum + stake.amount, 0);\n  const totalEarned = userStakings.reduce((sum, stake) => sum + stake.earned, 0);\n\n  return (\n    <Container maxWidth="xl" sx={{ mt: 4, mb: 4 }}>\n      {/* Header */}\n      <Box sx={{ mb: 4 }}>\n        <Typography variant="h4" fontWeight="bold" gutterBottom>\n          Earn & Staking\n        </Typography>\n        <Typography variant="body2" color="text.secondary">\n          Stake your crypto and earn passive income with competitive APY rates.\n        </Typography>\n      </Box>\n\n      {/* Stats Overview */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} md={4}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 1 }}>\n                <AccountBalance sx={{ mr: 1, color: \'primary.main\' }} />\n                <Typography variant="body2" color="text.secondary">\n                  Total Staked Value\n                </Typography>\n              </Box>\n              <Typography variant="h5" fontWeight="bold">\n                $45,230.50\n              </Typography>\n              <Typography variant="caption" color="text.secondary">\n                Across 3 assets\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={4}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 1 }}>\n                <TrendingUp sx={{ mr: 1, color: \'success.main\' }} />\n                <Typography variant="body2" color="text.secondary">\n                  Total Earned\n                </Typography>\n              </Box>\n              <Typography variant="h5" fontWeight="bold" color="success.main">\n                $2,156.80\n              </Typography>\n              <Typography variant="caption" color="success.main">\n                +4.77% return\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={4}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 1 }}>\n                <Calculate sx={{ mr: 1, color: \'primary.main\' }} />\n                <Typography variant="body2" color="text.secondary">\n                  Avg. APY\n                </Typography>\n              </Box>\n              <Typography variant="h5" fontWeight="bold">\n                8.57%\n              </Typography>\n              <Typography variant="caption" color="text.secondary">\n                Weighted average\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Main Content */}\n      <Paper>\n        <Tabs value={tabValue} onChange={handleTabChange} sx={{ borderBottom: 1, borderColor: \'divider\' }}>\n          <Tab label="Flexible Staking" />\n          <Tab label="Locked Staking" />\n          <Tab label="My Stakings" />\n          <Tab label="DeFi Yield" />\n          <Tab label="Launchpad" />\n        </Tabs>\n\n        {/* Flexible Staking Tab */}\n        {tabValue === 0 && (\n          <Box sx={{ p: 3 }}>\n            <Alert severity="info" sx={{ mb: 3 }}>\n              Flexible staking allows you to stake and unstake anytime without lock-up periods. Rewards are\n              distributed daily.\n            </Alert>\n\n            <Grid container spacing={3}>\n              {stakingProducts\n                .filter((p) => p.type === \'flexible\')\n                .map((product) => (\n                  <Grid item xs={12} md={6} lg={4} key={product.id}>\n                    <Card>\n                      <CardContent>\n                        <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\n                          <Avatar src={product.icon} sx={{ width: 50, height: 50, mr: 2 }}>\n                            {product.asset}\n                          </Avatar>\n                          <Box sx={{ flex: 1 }}>\n                            <Typography variant="h6">{product.asset}</Typography>\n                            <Chip label="Flexible" size="small" icon={<LockOpen />} color="success" />\n                          </Box>\n                        </Box>\n\n                        <Box sx={{ mb: 2 }}>\n                          <Typography variant="h4" color="primary.main" fontWeight="bold">\n                            {product.apy}%\n                          </Typography>\n                          <Typography variant="caption" color="text.secondary">\n                            Est. APY\n                          </Typography>\n                        </Box>\n\n                        <Divider sx={{ my: 2 }} />\n\n                        <Grid container spacing={1} sx={{ mb: 2 }}>\n                          <Grid item xs={6}>\n                            <Typography variant="caption" color="text.secondary">\n                              Min. Amount\n                            </Typography>\n                            <Typography variant="body2">\n                              {product.minAmount} {product.asset}\n                            </Typography>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <Typography variant="caption" color="text.secondary">\n                              Available\n                            </Typography>\n                            <Typography variant="body2">\n                              {product.available.toLocaleString()} {product.asset}\n                            </Typography>\n                          </Grid>\n                          <Grid item xs={12}>\n                            <Typography variant="caption" color="text.secondary">\n                              Total Staked\n                            </Typography>\n                            <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 0.5 }}>\n                              <LinearProgress\n                                variant="determinate"\n                                value={(product.totalStaked / (product.totalStaked + product.available)) * 100}\n                                sx={{ flex: 1, mr: 1, height: 6, borderRadius: 3 }}\n                              />\n                              <Typography variant="caption">\n                                {product.totalStaked.toLocaleString()} {product.asset}\n                              </Typography>\n                            </Box>\n                          </Grid>\n                        </Grid>\n\n                        <Button fullWidth variant="contained" onClick={() => handleStake(product)}>\n                          Stake Now\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                ))}\n            </Grid>\n          </Box>\n        )}\n\n        {/* Locked Staking Tab */}\n        {tabValue === 1 && (\n          <Box sx={{ p: 3 }}>\n            <Alert severity="info" sx={{ mb: 3 }}>\n              Locked staking offers higher APY but requires you to lock your assets for a fixed period. Early\n              withdrawal may result in penalty fees.\n            </Alert>\n\n            <Grid container spacing={3}>\n              {stakingProducts\n                .filter((p) => p.type === \'locked\')\n                .map((product) => (\n                  <Grid item xs={12} md={6} lg={4} key={product.id}>\n                    <Card>\n                      <CardContent>\n                        <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\n                          <Avatar src={product.icon} sx={{ width: 50, height: 50, mr: 2 }}>\n                            {product.asset}\n                          </Avatar>\n                          <Box sx={{ flex: 1 }}>\n                            <Typography variant="h6">{product.asset}</Typography>\n                            <Chip label={`${product.duration} Days`} size="small" icon={<Lock />} color="warning" />\n                          </Box>\n                        </Box>\n\n                        <Box sx={{ mb: 2 }}>\n                          <Typography variant="h4" color="primary.main" fontWeight="bold">\n                            {product.apy}%\n                          </Typography>\n                          <Typography variant="caption" color="text.secondary">\n                            Est. APY\n                          </Typography>\n                        </Box>\n\n                        <Divider sx={{ my: 2 }} />\n\n                        <Grid container spacing={1} sx={{ mb: 2 }}>\n                          <Grid item xs={6}>\n                            <Typography variant="caption" color="text.secondary">\n                              Min. Amount\n                            </Typography>\n                            <Typography variant="body2">\n                              {product.minAmount} {product.asset}\n                            </Typography>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <Typography variant="caption" color="text.secondary">\n                              Duration\n                            </Typography>\n                            <Typography variant="body2">{product.duration} Days</Typography>\n                          </Grid>\n                          <Grid item xs={12}>\n                            <Typography variant="caption" color="text.secondary">\n                              Total Staked\n                            </Typography>\n                            <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 0.5 }}>\n                              <LinearProgress\n                                variant="determinate"\n                                value={(product.totalStaked / (product.totalStaked + product.available)) * 100}\n                                sx={{ flex: 1, mr: 1, height: 6, borderRadius: 3 }}\n                              />\n                              <Typography variant="caption">\n                                {product.totalStaked.toLocaleString()} {product.asset}\n                              </Typography>\n                            </Box>\n                          </Grid>\n                        </Grid>\n\n                        <Button fullWidth variant="contained" onClick={() => handleStake(product)}>\n                          Stake Now\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                ))}\n            </Grid>\n          </Box>\n        )}\n\n        {/* My Stakings Tab */}\n        {tabValue === 2 && (\n          <Box sx={{ p: 3 }}>\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Asset</TableCell>\n                    <TableCell>Type</TableCell>\n                    <TableCell align="right">Amount</TableCell>\n                    <TableCell align="right">APY</TableCell>\n                    <TableCell align="right">Earned</TableCell>\n                    <TableCell>Start Date</TableCell>\n                    <TableCell>End Date</TableCell>\n                    <TableCell>Status</TableCell>\n                    <TableCell align="right">Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {userStakings.map((staking) => (\n                    <TableRow key={staking.id} hover>\n                      <TableCell>\n                        <Box sx={{ display: \'flex\', alignItems: \'center\' }}>\n                          <Avatar sx={{ width: 32, height: 32, mr: 2 }}>{staking.asset[0]}</Avatar>\n                          <Typography variant="body2" fontWeight="bold">\n                            {staking.asset}\n                          </Typography>\n                        </Box>\n                      </TableCell>\n                      <TableCell>\n                        <Chip\n                          label={staking.type}\n                          size="small"\n                          icon={staking.type === \'flexible\' ? <LockOpen /> : <Lock />}\n                          color={staking.type === \'flexible\' ? \'success\' : \'warning\'}\n                        />\n                      </TableCell>\n                      <TableCell align="right">\n                        <Typography variant="body2">\n                          {staking.amount.toLocaleString()} {staking.asset}\n                        </Typography>\n                      </TableCell>\n                      <TableCell align="right">\n                        <Typography variant="body2" color="primary.main" fontWeight="bold">\n                          {staking.apy}%\n                        </Typography>\n                      </TableCell>\n                      <TableCell align="right">\n                        <Typography variant="body2" color="success.main" fontWeight="bold">\n                          +{staking.earned.toFixed(4)} {staking.asset}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Typography variant="body2">{staking.startDate}</Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Typography variant="body2">{staking.endDate || \'Flexible\'}</Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Chip\n                          label={staking.status}\n                          size="small"\n                          color={staking.status === \'active\' ? \'success\' : \'default\'}\n                          icon={staking.status === \'active\' ? <CheckCircle /> : <Schedule />}\n                        />\n                      </TableCell>\n                      <TableCell align="right">\n                        {staking.type === \'flexible\' && (\n                          <Button size="small" variant="outlined">\n                            Unstake\n                          </Button>\n                        )}\n                        {staking.type === \'locked\' && (\n                          <Button size="small" variant="outlined" disabled>\n                            Locked\n                          </Button>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Box>\n        )}\n\n        {/* DeFi Yield Tab */}\n        {tabValue === 3 && (\n          <Box sx={{ p: 3 }}>\n            <Alert severity="info" sx={{ mb: 3 }}>\n              DeFi yield farming allows you to provide liquidity to decentralized protocols and earn rewards. Higher\n              APY comes with higher risk.\n            </Alert>\n            <Typography variant="h6" color="text.secondary" align="center" sx={{ py: 8 }}>\n              DeFi Yield Farming Coming Soon\n            </Typography>\n          </Box>\n        )}\n\n        {/* Launchpad Tab */}\n        {tabValue === 4 && (\n          <Box sx={{ p: 3 }}>\n            <Alert severity="info" sx={{ mb: 3 }}>\n              Stake tokens to participate in new token launches and get early access to promising projects.\n            </Alert>\n            <Typography variant="h6" color="text.secondary" align="center" sx={{ py: 8 }}>\n              Launchpad Staking Coming Soon\n            </Typography>\n          </Box>\n        )}\n      </Paper>\n\n      {/* Stake Dialog */}\n      <Dialog open={stakeDialogOpen} onClose={() => setStakeDialogOpen(false)} maxWidth="sm" fullWidth>\n        <DialogTitle>\n          Stake {selectedProduct?.asset} - {selectedProduct?.type === \'flexible\' ? \'Flexible\' : \'Locked\'}\n        </DialogTitle>\n        <DialogContent>\n          {selectedProduct && (\n            <Box sx={{ mt: 2 }}>\n              {/* Product Info */}\n              <Paper sx={{ p: 2, mb: 3, bgcolor: \'background.default\' }}>\n                <Grid container spacing={2}>\n                  <Grid item xs={6}>\n                    <Typography variant="caption" color="text.secondary">\n                      APY\n                    </Typography>\n                    <Typography variant="h6" color="primary.main">\n                      {selectedProduct.apy}%\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="caption" color="text.secondary">\n                      {selectedProduct.type === \'locked\' ? \'Duration\' : \'Type\'}\n                    </Typography>\n                    <Typography variant="h6">\n                      {selectedProduct.type === \'locked\' ? `${selectedProduct.duration} Days` : \'Flexible\'}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="caption" color="text.secondary">\n                      Min. Amount\n                    </Typography>\n                    <Typography variant="body2">\n                      {selectedProduct.minAmount} {selectedProduct.asset}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="caption" color="text.secondary">\n                      Available\n                    </Typography>\n                    <Typography variant="body2">\n                      {selectedProduct.available.toLocaleString()} {selectedProduct.asset}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Paper>\n\n              {/* Stake Amount */}\n              <TextField\n                fullWidth\n                label="Stake Amount"\n                type="number"\n                value={stakeAmount}\n                onChange={(e) => handleAmountChange(e.target.value)}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position="end">\n                      <Typography>{selectedProduct.asset}</Typography>\n                      <Button size="small" sx={{ ml: 1 }}>\n                        Max\n                      </Button>\n                    </InputAdornment>\n                  ),\n                }}\n                sx={{ mb: 2 }}\n              />\n\n              <Box sx={{ display: \'flex\', justifyContent: \'space-between\', mb: 3 }}>\n                <Typography variant="body2" color="text.secondary">\n                  Available Balance:\n                </Typography>\n                <Typography variant="body2">\n                  2.5 {selectedProduct.asset}\n                </Typography>\n              </Box>\n\n              {/* Reward Calculation */}\n              {calculatedReward > 0 && (\n                <Paper sx={{ p: 2, mb: 3, bgcolor: \'success.light\' }}>\n                  <Typography variant="body2" color="text.secondary" gutterBottom>\n                    Estimated Rewards\n                  </Typography>\n                  <Typography variant="h5" fontWeight="bold">\n                    {calculatedReward.toFixed(6)} {selectedProduct.asset}\n                  </Typography>\n                  <Typography variant="caption" color="text.secondary">\n                    {selectedProduct.type === \'locked\'\n                      ? `After ${selectedProduct.duration} days`\n                      : \'Per year (flexible)\'}\n                  </Typography>\n                </Paper>\n              )}\n\n              {/* Terms */}\n              <Alert severity="warning">\n                <Typography variant="body2">\n                  {selectedProduct.type === \'flexible\' ? (\n                    <>\n                      • You can unstake anytime\n                      <br />\n                      • Rewards are distributed daily\n                      <br />• No lock-up period\n                    </>\n                  ) : (\n                    <>\n                      • Assets will be locked for {selectedProduct.duration} days\n                      <br />\n                      • Early withdrawal incurs 10% penalty\n                      <br />• Rewards are paid at maturity\n                    </>\n                  )}\n                </Typography>\n              </Alert>\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setStakeDialogOpen(false)}>Cancel</Button>\n          <Button variant="contained" disabled={!stakeAmount || parseFloat(stakeAmount) < (selectedProduct?.minAmount || 0)}>\n            Confirm Stake\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default EarnPage;\n</create-file>\n</function_calls>'}
{'role': 'assistant', 'content': 'Now let me create a comprehensive copy trading page:\n\n<function_calls>\n<create-file file_path="tigerex/src/pages/user/copy-trading.tsx">\nimport React, { useState } from \'react\';\nimport {\n  Box,\n  Container,\n  Grid,\n  Paper,\n  Typography,\n  Card,\n  CardContent,\n  Button,\n  Tabs,\n  Tab,\n  TextField,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Chip,\n  Avatar,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Slider,\n  Switch,\n  FormControlLabel,\n  Alert,\n  LinearProgress,\n  IconButton,\n  Tooltip,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  Rating,\n} from \'@mui/material\';\nimport {\n  TrendingUp,\n  TrendingDown,\n  Star,\n  ContentCopy,\n  Share,\n  Info,\n  CheckCircle,\n  Cancel,\n  BarChart,\n  Timeline,\n  People,\n  AttachMoney,\n  Settings,\n  Visibility,\n  VisibilityOff,\n} from \'@mui/icons-material\';\nimport { Line, Doughnut } from \'react-chartjs-2\';\n\ninterface Trader {\n  id: string;\n  name: string;\n  avatar: string;\n  verified: boolean;\n  rating: number;\n  followers: number;\n  copiers: number;\n  totalPnL: number;\n  totalPnLPercent: number;\n  roi30d: number;\n  roi90d: number;\n  roi1y: number;\n  winRate: number;\n  totalTrades: number;\n  avgHoldTime: string;\n  maxDrawdown: number;\n  sharpeRatio: number;\n  aum: number;\n  minCopyAmount: number;\n  copyFee: number;\n  tradingPairs: string[];\n  strategy: string;\n  riskLevel: \'Low\' | \'Medium\' | \'High\';\n}\n\ninterface CopyPosition {\n  id: string;\n  trader: string;\n  amount: number;\n  currentValue: number;\n  pnl: number;\n  pnlPercent: number;\n  startDate: string;\n  status: \'active\' | \'paused\' | \'stopped\';\n  copyRatio: number;\n}\n\nconst CopyTradingPage: React.FC = () => {\n  const [tabValue, setTabValue] = useState(0);\n  const [selectedTrader, setSelectedTrader] = useState<Trader | null>(null);\n  const [copyDialogOpen, setCopyDialogOpen] = useState(false);\n  const [detailsDialogOpen, setDetailsDialogOpen] = useState(false);\n  const [copyAmount, setCopyAmount] = useState(1000);\n  const [copyRatio, setCopyRatio] = useState(1);\n  const [stopLoss, setStopLoss] = useState(20);\n  const [takeProfit, setTakeProfit] = useState(50);\n  const [autoCopy, setAutoCopy] = useState(true);\n\n  // Mock data\n  const [topTraders, setTopTraders] = useState<Trader[]>([\n    {\n      id: \'1\',\n      name: \'CryptoMaster\',\n      avatar: \'/avatars/trader1.jpg\',\n      verified: true,\n      rating: 4.9,\n      followers: 15420,\n      copiers: 3250,\n      totalPnL: 125000,\n      totalPnLPercent: 245.5,\n      roi30d: 15.2,\n      roi90d: 42.8,\n      roi1y: 156.3,\n      winRate: 78.5,\n      totalTrades: 1250,\n      avgHoldTime: \'2.5 days\',\n      maxDrawdown: 12.5,\n      sharpeRatio: 2.8,\n      aum: 2500000,\n      minCopyAmount: 100,\n      copyFee: 10,\n      tradingPairs: [\'BTC/USDT\', \'ETH/USDT\', \'BNB/USDT\'],\n      strategy: \'Swing Trading\',\n      riskLevel: \'Medium\',\n    },\n    {\n      id: \'2\',\n      name: \'AlgoTrader Pro\',\n      avatar: \'/avatars/trader2.jpg\',\n      verified: true,\n      rating: 4.8,\n      followers: 12350,\n      copiers: 2890,\n      totalPnL: 98500,\n      totalPnLPercent: 198.7,\n      roi30d: 12.8,\n      roi90d: 38.5,\n      roi1y: 142.1,\n      winRate: 75.2,\n      totalTrades: 2150,\n      avgHoldTime: \'1.2 days\',\n      maxDrawdown: 15.3,\n      sharpeRatio: 2.5,\n      aum: 1850000,\n      minCopyAmount: 200,\n      copyFee: 12,\n      tradingPairs: [\'BTC/USDT\', \'ETH/USDT\', \'SOL/USDT\', \'AVAX/USDT\'],\n      strategy: \'Algorithmic Trading\',\n      riskLevel: \'High\',\n    },\n    {\n      id: \'3\',\n      name: \'SafeTrader\',\n      avatar: \'/avatars/trader3.jpg\',\n      verified: true,\n      rating: 4.7,\n      followers: 9850,\n      copiers: 2150,\n      totalPnL: 65000,\n      totalPnLPercent: 132.5,\n      roi30d: 8.5,\n      roi90d: 25.3,\n      roi1y: 98.2,\n      winRate: 82.1,\n      totalTrades: 850,\n      avgHoldTime: \'5.8 days\',\n      maxDrawdown: 8.2,\n      sharpeRatio: 3.2,\n      aum: 1250000,\n      minCopyAmount: 50,\n      copyFee: 8,\n      tradingPairs: [\'BTC/USDT\', \'ETH/USDT\'],\n      strategy: \'Conservative Growth\',\n      riskLevel: \'Low\',\n    },\n  ]);\n\n  const [myCopyPositions, setMyCopyPositions] = useState<CopyPosition[]>([\n    {\n      id: \'1\',\n      trader: \'CryptoMaster\',\n      amount: 5000,\n      currentValue: 5750,\n      pnl: 750,\n      pnlPercent: 15,\n      startDate: \'2024-01-01\',\n      status: \'active\',\n      copyRatio: 1,\n    },\n    {\n      id: \'2\',\n      trader: \'AlgoTrader Pro\',\n      amount: 3000,\n      currentValue: 3240,\n      pnl: 240,\n      pnlPercent: 8,\n      startDate: \'2024-01-10\',\n      status: \'active\',\n      copyRatio: 0.5,\n    },\n  ]);\n\n  const performanceChartData = {\n    labels: [\'Jan\', \'Feb\', \'Mar\', \'Apr\', \'May\', \'Jun\'],\n    datasets: [\n      {\n        label: \'Portfolio Value\',\n        data: [10000, 10500, 11200, 10800, 11500, 12000],\n        borderColor: \'rgb(75, 192, 192)\',\n        backgroundColor: \'rgba(75, 192, 192, 0.1)\',\n        tension: 0.4,\n      },\n    ],\n  };\n\n  const allocationChartData = {\n    labels: myCopyPositions.map((pos) => pos.trader),\n    datasets: [\n      {\n        data: myCopyPositions.map((pos) => pos.amount),\n        backgroundColor: [\'rgba(255, 159, 64, 0.8)\', \'rgba(54, 162, 235, 0.8)\', \'rgba(75, 192, 192, 0.8)\'],\n      },\n    ],\n  };\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const handleCopyTrader = (trader: Trader) => {\n    setSelectedTrader(trader);\n    setCopyDialogOpen(true);\n  };\n\n  const handleViewDetails = (trader: Trader) => {\n    setSelectedTrader(trader);\n    setDetailsDialogOpen(true);\n  };\n\n  const getRiskColor = (risk: string) => {\n    switch (risk) {\n      case \'Low\':\n        return \'success\';\n      case \'Medium\':\n        return \'warning\';\n      case \'High\':\n        return \'error\';\n      default:\n        return \'default\';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \'active\':\n        return \'success\';\n      case \'paused\':\n        return \'warning\';\n      case \'stopped\':\n        return \'error\';\n      default:\n        return \'default\';\n    }\n  };\n\n  return (\n    <Container maxWidth="xl" sx={{ mt: 4, mb: 4 }}>\n      {/* Header */}\n      <Box sx={{ mb: 4 }}>\n        <Typography variant="h4" fontWeight="bold" gutterBottom>\n          Copy Trading\n        </Typography>\n        <Typography variant="body2" color="text.secondary">\n          Follow and copy successful traders automatically. Earn while you learn.\n        </Typography>\n      </Box>\n\n      {/* Stats Overview */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 1 }}>\n                <AttachMoney sx={{ mr: 1, color: \'primary.main\' }} />\n                <Typography variant="body2" color="text.secondary">\n                  Total Copy Value\n                </Typography>\n              </Box>\n              <Typography variant="h5" fontWeight="bold">\n                $12,000\n              </Typography>\n              <Chip label="+15.2%" size="small" color="success" icon={<TrendingUp />} sx={{ mt: 1 }} />\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 1 }}>\n                <People sx={{ mr: 1, color: \'primary.main\' }} />\n                <Typography variant="body2" color="text.secondary">\n                  Active Copies\n                </Typography>\n              </Box>\n              <Typography variant="h5" fontWeight="bold">\n                3\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 1 }}>\n                <TrendingUp sx={{ mr: 1, color: \'success.main\' }} />\n                <Typography variant="body2" color="text.secondary">\n                  Total P&L\n                </Typography>\n              </Box>\n              <Typography variant="h5" fontWeight="bold" color="success.main">\n                +$1,820\n              </Typography>\n              <Typography variant="caption" color="success.main">\n                +15.2%\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 1 }}>\n                <BarChart sx={{ mr: 1, color: \'primary.main\' }} />\n                <Typography variant="body2" color="text.secondary">\n                  Avg. ROI (30d)\n                </Typography>\n              </Box>\n              <Typography variant="h5" fontWeight="bold">\n                12.5%\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Main Content */}\n      <Paper>\n        <Tabs value={tabValue} onChange={handleTabChange} sx={{ borderBottom: 1, borderColor: \'divider\' }}>\n          <Tab label="Discover Traders" />\n          <Tab label="My Copies" />\n          <Tab label="Performance" />\n          <Tab label="Leaderboard" />\n        </Tabs>\n\n        {/* Discover Traders Tab */}\n        {tabValue === 0 && (\n          <Box sx={{ p: 3 }}>\n            {/* Filters */}\n            <Grid container spacing={2} sx={{ mb: 3 }}>\n              <Grid item xs={12} sm={6} md={3}>\n                <FormControl fullWidth size="small">\n                  <InputLabel>Sort By</InputLabel>\n                  <Select label="Sort By" defaultValue="roi">\n                    <MenuItem value="roi">Highest ROI</MenuItem>\n                    <MenuItem value="followers">Most Followers</MenuItem>\n                    <MenuItem value="winrate">Win Rate</MenuItem>\n                    <MenuItem value="sharpe">Sharpe Ratio</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6} md={3}>\n                <FormControl fullWidth size="small">\n                  <InputLabel>Risk Level</InputLabel>\n                  <Select label="Risk Level" defaultValue="all">\n                    <MenuItem value="all">All Levels</MenuItem>\n                    <MenuItem value="low">Low Risk</MenuItem>\n                    <MenuItem value="medium">Medium Risk</MenuItem>\n                    <MenuItem value="high">High Risk</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6} md={3}>\n                <FormControl fullWidth size="small">\n                  <InputLabel>Strategy</InputLabel>\n                  <Select label="Strategy" defaultValue="all">\n                    <MenuItem value="all">All Strategies</MenuItem>\n                    <MenuItem value="swing">Swing Trading</MenuItem>\n                    <MenuItem value="day">Day Trading</MenuItem>\n                    <MenuItem value="scalping">Scalping</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6} md={3}>\n                <TextField fullWidth size="small" label="Min ROI %" type="number" />\n              </Grid>\n            </Grid>\n\n            {/* Traders Grid */}\n            <Grid container spacing={3}>\n              {topTraders.map((trader) => (\n                <Grid item xs={12} md={6} lg={4} key={trader.id}>\n                  <Card sx={{ height: \'100%\' }}>\n                    <CardContent>\n                      {/* Trader Header */}\n                      <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\n                        <Avatar src={trader.avatar} sx={{ width: 60, height: 60, mr: 2 }}>\n                          {trader.name[0]}\n                        </Avatar>\n                        <Box sx={{ flex: 1 }}>\n                          <Box sx={{ display: \'flex\', alignItems: \'center\', gap: 0.5 }}>\n                            <Typography variant="h6">{trader.name}</Typography>\n                            {trader.verified && <CheckCircle sx={{ fontSize: 18, color: \'primary.main\' }} />}\n                          </Box>\n                          <Box sx={{ display: \'flex\', alignItems: \'center\', gap: 1 }}>\n                            <Rating value={trader.rating} precision={0.1} size="small" readOnly />\n                            <Typography variant="caption" color="text.secondary">\n                              ({trader.rating})\n                            </Typography>\n                          </Box>\n                        </Box>\n                        <Chip label={trader.riskLevel} size="small" color={getRiskColor(trader.riskLevel) as any} />\n                      </Box>\n\n                      {/* Stats */}\n                      <Grid container spacing={2} sx={{ mb: 2 }}>\n                        <Grid item xs={6}>\n                          <Typography variant="caption" color="text.secondary">\n                            30d ROI\n                          </Typography>\n                          <Typography variant="h6" color="success.main">\n                            +{trader.roi30d}%\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={6}>\n                          <Typography variant="caption" color="text.secondary">\n                            Win Rate\n                          </Typography>\n                          <Typography variant="h6">{trader.winRate}%</Typography>\n                        </Grid>\n                        <Grid item xs={6}>\n                          <Typography variant="caption" color="text.secondary">\n                            Followers\n                          </Typography>\n                          <Typography variant="body2">{trader.followers.toLocaleString()}</Typography>\n                        </Grid>\n                        <Grid item xs={6}>\n                          <Typography variant="caption" color="text.secondary">\n                            Copiers\n                          </Typography>\n                          <Typography variant="body2">{trader.copiers.toLocaleString()}</Typography>\n                        </Grid>\n                      </Grid>\n\n                      {/* Trading Info */}\n                      <Box sx={{ mb: 2 }}>\n                        <Typography variant="caption" color="text.secondary" display="block" gutterBottom>\n                          Strategy: {trader.strategy}\n                        </Typography>\n                        <Typography variant="caption" color="text.secondary" display="block" gutterBottom>\n                          Min. Copy: ${trader.minCopyAmount} • Fee: {trader.copyFee}%\n                        </Typography>\n                        <Box sx={{ display: \'flex\', flexWrap: \'wrap\', gap: 0.5, mt: 1 }}>\n                          {trader.tradingPairs.slice(0, 3).map((pair, index) => (\n                            <Chip key={index} label={pair} size="small" variant="outlined" />\n                          ))}\n                        </Box>\n                      </Box>\n\n                      {/* Actions */}\n                      <Box sx={{ display: \'flex\', gap: 1 }}>\n                        <Button fullWidth variant="contained" onClick={() => handleCopyTrader(trader)}>\n                          Copy Trader\n                        </Button>\n                        <Button variant="outlined" onClick={() => handleViewDetails(trader)}>\n                          Details\n                        </Button>\n                      </Box>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              ))}\n            </Grid>\n          </Box>\n        )}\n\n        {/* My Copies Tab */}\n        {tabValue === 1 && (\n          <Box sx={{ p: 3 }}>\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Trader</TableCell>\n                    <TableCell align="right">Copy Amount</TableCell>\n                    <TableCell align="right">Current Value</TableCell>\n                    <TableCell align="right">P&L</TableCell>\n                    <TableCell align="right">Copy Ratio</TableCell>\n                    <TableCell>Start Date</TableCell>\n                    <TableCell>Status</TableCell>\n                    <TableCell align="right">Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {myCopyPositions.map((position) => (\n                    <TableRow key={position.id} hover>\n                      <TableCell>\n                        <Box sx={{ display: \'flex\', alignItems: \'center\' }}>\n                          <Avatar sx={{ width: 40, height: 40, mr: 2 }}>{position.trader[0]}</Avatar>\n                          <Typography variant="body2" fontWeight="bold">\n                            {position.trader}\n                          </Typography>\n                        </Box>\n                      </TableCell>\n                      <TableCell align="right">\n                        <Typography variant="body2">${position.amount.toLocaleString()}</Typography>\n                      </TableCell>\n                      <TableCell align="right">\n                        <Typography variant="body2" fontWeight="bold">\n                          ${position.currentValue.toLocaleString()}\n                        </Typography>\n                      </TableCell>\n                      <TableCell align="right">\n                        <Box>\n                          <Typography\n                            variant="body2"\n                            fontWeight="bold"\n                            color={position.pnl >= 0 ? \'success.main\' : \'error.main\'}\n                          >\n                            {position.pnl >= 0 ? \'+\' : \'\'}${position.pnl.toLocaleString()}\n                          </Typography>\n                          <Typography\n                            variant="caption"\n                            color={position.pnlPercent >= 0 ? \'success.main\' : \'error.main\'}\n                          >\n                            {position.pnlPercent >= 0 ? \'+\' : \'\'}\n                            {position.pnlPercent}%\n                          </Typography>\n                        </Box>\n                      </TableCell>\n                      <TableCell align="right">\n                        <Typography variant="body2">{position.copyRatio}x</Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Typography variant="body2">{position.startDate}</Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Chip label={position.status} size="small" color={getStatusColor(position.status) as any} />\n                      </TableCell>\n                      <TableCell align="right">\n                        <Button size="small" variant="outlined" sx={{ mr: 1 }}>\n                          Settings\n                        </Button>\n                        <Button size="small" variant="outlined" color="error">\n                          Stop\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Box>\n        )}\n\n        {/* Performance Tab */}\n        {tabValue === 2 && (\n          <Box sx={{ p: 3 }}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={8}>\n                <Paper sx={{ p: 3 }}>\n                  <Typography variant="h6" fontWeight="bold" gutterBottom>\n                    Portfolio Performance\n                  </Typography>\n                  <Line data={performanceChartData} options={{ responsive: true, maintainAspectRatio: true }} />\n                </Paper>\n              </Grid>\n              <Grid item xs={12} md={4}>\n                <Paper sx={{ p: 3 }}>\n                  <Typography variant="h6" fontWeight="bold" gutterBottom>\n                    Allocation\n                  </Typography>\n                  <Doughnut data={allocationChartData} options={{ responsive: true, maintainAspectRatio: true }} />\n                </Paper>\n              </Grid>\n            </Grid>\n          </Box>\n        )}\n\n        {/* Leaderboard Tab */}\n        {tabValue === 3 && (\n          <Box sx={{ p: 3 }}>\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Rank</TableCell>\n                    <TableCell>Trader</TableCell>\n                    <TableCell align="right">30d ROI</TableCell>\n                    <TableCell align="right">90d ROI</TableCell>\n                    <TableCell align="right">1Y ROI</TableCell>\n                    <TableCell align="right">Win Rate</TableCell>\n                    <TableCell align="right">Copiers</TableCell>\n                    <TableCell align="right">AUM</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {topTraders.map((trader, index) => (\n                    <TableRow key={trader.id} hover>\n                      <TableCell>\n                        <Chip label={`#${index + 1}`} size="small" color={index === 0 ? \'primary\' : \'default\'} />\n                      </TableCell>\n                      <TableCell>\n                        <Box sx={{ display: \'flex\', alignItems: \'center\' }}>\n                          <Avatar src={trader.avatar} sx={{ width: 40, height: 40, mr: 2 }}>\n                            {trader.name[0]}\n                          </Avatar>\n                          <Box>\n                            <Box sx={{ display: \'flex\', alignItems: \'center\', gap: 0.5 }}>\n                              <Typography variant="body2" fontWeight="bold">\n                                {trader.name}\n                              </Typography>\n                              {trader.verified && <CheckCircle sx={{ fontSize: 16, color: \'primary.main\' }} />}\n                            </Box>\n                            <Typography variant="caption" color="text.secondary">\n                              {trader.strategy}\n                            </Typography>\n                          </Box>\n                        </Box>\n                      </TableCell>\n                      <TableCell align="right">\n                        <Typography variant="body2" color="success.main" fontWeight="bold">\n                          +{trader.roi30d}%\n                        </Typography>\n                      </TableCell>\n                      <TableCell align="right">\n                        <Typography variant="body2" color="success.main">\n                          +{trader.roi90d}%\n                        </Typography>\n                      </TableCell>\n                      <TableCell align="right">\n                        <Typography variant="body2" color="success.main">\n                          +{trader.roi1y}%\n                        </Typography>\n                      </TableCell>\n                      <TableCell align="right">\n                        <Typography variant="body2">{trader.winRate}%</Typography>\n                      </TableCell>\n                      <TableCell align="right">\n                        <Typography variant="body2">{trader.copiers.toLocaleString()}</Typography>\n                      </TableCell>\n                      <TableCell align="right">\n                        <Typography variant="body2">${(trader.aum / 1000000).toFixed(2)}M</Typography>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Box>\n        )}\n      </Paper>\n\n      {/* Copy Trader Dialog */}\n      <Dialog open={copyDialogOpen} onClose={() => setCopyDialogOpen(false)} maxWidth="sm" fullWidth>\n        <DialogTitle>Copy {selectedTrader?.name}</DialogTitle>\n        <DialogContent>\n          {selectedTrader && (\n            <Box sx={{ mt: 2 }}>\n              {/* Trader Summary */}\n              <Paper sx={{ p: 2, mb: 3, bgcolor: \'background.default\' }}>\n                <Grid container spacing={2}>\n                  <Grid item xs={6}>\n                    <Typography variant="caption" color="text.secondary">\n                      30d ROI\n                    </Typography>\n                    <Typography variant="h6" color="success.main">\n                      +{selectedTrader.roi30d}%\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="caption" color="text.secondary">\n                      Win Rate\n                    </Typography>\n                    <Typography variant="h6">{selectedTrader.winRate}%</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="caption" color="text.secondary">\n                      Copy Fee\n                    </Typography>\n                    <Typography variant="body2">{selectedTrader.copyFee}%</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant="caption" color="text.secondary">\n                      Min. Amount\n                    </Typography>\n                    <Typography variant="body2">${selectedTrader.minCopyAmount}</Typography>\n                  </Grid>\n                </Grid>\n              </Paper>\n\n              {/* Copy Settings */}\n              <Typography variant="subtitle2" gutterBottom>\n                Copy Amount\n              </Typography>\n              <TextField\n                fullWidth\n                type="number"\n                value={copyAmount}\n                onChange={(e) => setCopyAmount(Number(e.target.value))}\n                sx={{ mb: 3 }}\n                InputProps={{\n                  startAdornment: <Typography sx={{ mr: 1 }}>$</Typography>,\n                }}\n              />\n\n              <Typography variant="subtitle2" gutterBottom>\n                Copy Ratio: {copyRatio}x\n              </Typography>\n              <Slider\n                value={copyRatio}\n                onChange={(e, value) => setCopyRatio(value as number)}\n                min={0.1}\n                max={2}\n                step={0.1}\n                marks\n                valueLabelDisplay="auto"\n                sx={{ mb: 3 }}\n              />\n\n              <Typography variant="subtitle2" gutterBottom>\n                Stop Loss: {stopLoss}%\n              </Typography>\n              <Slider\n                value={stopLoss}\n                onChange={(e, value) => setStopLoss(value as number)}\n                min={5}\n                max={50}\n                step={5}\n                marks\n                valueLabelDisplay="auto"\n                sx={{ mb: 3 }}\n              />\n\n              <Typography variant="subtitle2" gutterBottom>\n                Take Profit: {takeProfit}%\n              </Typography>\n              <Slider\n                value={takeProfit}\n                onChange={(e, value) => setTakeProfit(value as number)}\n                min={10}\n                max={100}\n                step={10}\n                marks\n                valueLabelDisplay="auto"\n                sx={{ mb: 3 }}\n              />\n\n              <FormControlLabel\n                control={<Switch checked={autoCopy} onChange={(e) => setAutoCopy(e.target.checked)} />}\n                label="Auto-copy new trades"\n              />\n\n              <Alert severity="info" sx={{ mt: 3 }}>\n                <Typography variant="body2">\n                  • You will copy all trades from {selectedTrader.name}\n                  <br />\n                  • Copy ratio determines the proportion of your capital used\n                  <br />\n                  • Stop loss and take profit will be applied automatically\n                  <br />• You can stop copying at any time\n                </Typography>\n              </Alert>\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setCopyDialogOpen(false)}>Cancel</Button>\n          <Button variant="contained">Start Copying</Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Trader Details Dialog */}\n      <Dialog open={detailsDialogOpen} onClose={() => setDetailsDialogOpen(false)} maxWidth="md" fullWidth>\n        <DialogTitle>\n          <Box sx={{ display: \'flex\', alignItems: \'center\', justifyContent: \'space-between\' }}>\n            <Box sx={{ display: \'flex\', alignItems: \'center\' }}>\n              <Avatar src={selectedTrader?.avatar} sx={{ width: 50, height: 50, mr: 2 }}>\n                {selectedTrader?.name[0]}\n              </Avatar>\n              <Box>\n                <Box sx={{ display: \'flex\', alignItems: \'center\', gap: 0.5 }}>\n                  <Typography variant="h6">{selectedTrader?.name}</Typography>\n                  {selectedTrader?.verified && <CheckCircle sx={{ fontSize: 20, color: \'primary.main\' }} />}\n                </Box>\n                <Typography variant="caption" color="text.secondary">\n                  {selectedTrader?.strategy}\n                </Typography>\n              </Box>\n            </Box>\n            <Box sx={{ display: \'flex\', gap: 1 }}>\n              <IconButton>\n                <Share />\n              </IconButton>\n              <IconButton>\n                <Star />\n              </IconButton>\n            </Box>\n          </Box>\n        </DialogTitle>\n        <DialogContent>\n          {selectedTrader && (\n            <Box>\n              {/* Performance Metrics */}\n              <Typography variant="h6" gutterBottom>\n                Performance Metrics\n              </Typography>\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid item xs={6} md={3}>\n                  <Paper sx={{ p: 2, textAlign: \'center\' }}>\n                    <Typography variant="caption" color="text.secondary">\n                      30d ROI\n                    </Typography>\n                    <Typography variant="h6" color="success.main">\n                      +{selectedTrader.roi30d}%\n                    </Typography>\n                  </Paper>\n                </Grid>\n                <Grid item xs={6} md={3}>\n                  <Paper sx={{ p: 2, textAlign: \'center\' }}>\n                    <Typography variant="caption" color="text.secondary">\n                      90d ROI\n                    </Typography>\n                    <Typography variant="h6" color="success.main">\n                      +{selectedTrader.roi90d}%\n                    </Typography>\n                  </Paper>\n                </Grid>\n                <Grid item xs={6} md={3}>\n                  <Paper sx={{ p: 2, textAlign: \'center\' }}>\n                    <Typography variant="caption" color="text.secondary">\n                      1Y ROI\n                    </Typography>\n                    <Typography variant="h6" color="success.main">\n                      +{selectedTrader.roi1y}%\n                    </Typography>\n                  </Paper>\n                </Grid>\n                <Grid item xs={6} md={3}>\n                  <Paper sx={{ p: 2, textAlign: \'center\' }}>\n                    <Typography variant="caption" color="text.secondary">\n                      Win Rate\n                    </Typography>\n                    <Typography variant="h6">{selectedTrader.winRate}%</Typography>\n                  </Paper>\n                </Grid>\n              </Grid>\n\n              {/* Risk Metrics */}\n              <Typography variant="h6" gutterBottom>\n                Risk Metrics\n              </Typography>\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid item xs={6}>\n                  <Typography variant="body2" color="text.secondary">\n                    Max Drawdown\n                  </Typography>\n                  <Typography variant="body1">{selectedTrader.maxDrawdown}%</Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography variant="body2" color="text.secondary">\n                    Sharpe Ratio\n                  </Typography>\n                  <Typography variant="body1">{selectedTrader.sharpeRatio}</Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography variant="body2" color="text.secondary">\n                    Avg. Hold Time\n                  </Typography>\n                  <Typography variant="body1">{selectedTrader.avgHoldTime}</Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography variant="body2" color="text.secondary">\n                    Total Trades\n                  </Typography>\n                  <Typography variant="body1">{selectedTrader.totalTrades.toLocaleString()}</Typography>\n                </Grid>\n              </Grid>\n\n              {/* Trading Pairs */}\n              <Typography variant="h6" gutterBottom>\n                Trading Pairs\n              </Typography>\n              <Box sx={{ display: \'flex\', flexWrap: \'wrap\', gap: 1, mb: 3 }}>\n                {selectedTrader.tradingPairs.map((pair, index) => (\n                  <Chip key={index} label={pair} variant="outlined" />\n                ))}\n              </Box>\n\n              {/* Copy Info */}\n              <Alert severity="info">\n                <Typography variant="body2">\n                  • Minimum copy amount: ${selectedTrader.minCopyAmount}\n                  <br />\n                  • Copy fee: {selectedTrader.copyFee}% of profits\n                  <br />\n                  • Current copiers: {selectedTrader.copiers.toLocaleString()}\n                  <br />• Assets under management: ${(selectedTrader.aum / 1000000).toFixed(2)}M\n                </Typography>\n              </Alert>\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDetailsDialogOpen(false)}>Close</Button>\n          <Button\n            variant="contained"\n            onClick={() => {\n              setDetailsDialogOpen(false);\n              setCopyDialogOpen(true);\n            }}\n          >\n            Copy Trader\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default CopyTradingPage;\n</create-file>\n</function_calls>'}
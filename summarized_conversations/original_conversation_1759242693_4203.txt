{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="desktop-apps/preload.js">\n/**\n * TigerEx Desktop Application - Preload Script\n * Exposes secure APIs to the renderer process\n */\n\nconst { contextBridge, ipcRenderer } = require(\'electron\');\n\n// Expose protected methods that allow the renderer process to use\n// ipcRenderer without exposing the entire object\ncontextBridge.exposeInMainWorld(\'electronAPI\', {\n  // Store operations\n  store: {\n    get: (key) => ipcRenderer.invoke(\'store-get\', key),\n    set: (key, value) => ipcRenderer.invoke(\'store-set\', key, value),\n    delete: (key) => ipcRenderer.invoke(\'store-delete\', key)\n  },\n\n  // API requests\n  api: {\n    request: (method, endpoint, data, headers) => \n      ipcRenderer.invoke(\'api-request\', { method, endpoint, data, headers })\n  },\n\n  // Navigation\n  navigation: {\n    onNavigate: (callback) => ipcRenderer.on(\'navigate\', (event, route) => callback(route))\n  },\n\n  // External links\n  openExternal: (url) => ipcRenderer.invoke(\'open-external\', url),\n\n  // Notifications\n  showNotification: (title, body) => \n    ipcRenderer.invoke(\'show-notification\', { title, body }),\n\n  // App info\n  getAppVersion: () => ipcRenderer.invoke(\'get-app-version\'),\n\n  // Order dialog\n  onOpenOrderDialog: (callback) => \n    ipcRenderer.on(\'open-order-dialog\', () => callback())\n});\n</create-file>\n</function_calls>'}
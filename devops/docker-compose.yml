version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: tigerex-postgres
    environment:
      POSTGRES_DB: tigerex
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-tigerex_password}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - tigerex-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: tigerex-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - tigerex-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-tigerex_redis}

  # Message Broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: tigerex-kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - tigerex-network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: tigerex-zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - tigerex-network
    restart: unless-stopped

  # Backend Services
  api-gateway:
    build:
      context: ../backend/api-gateway
      dockerfile: Dockerfile
    container_name: tigerex-api-gateway
    ports:
      - '8080:8080'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  matching-engine:
    build:
      context: ../backend/matching-engine
      dockerfile: Dockerfile
    container_name: tigerex-matching-engine
    ports:
      - '8081:8081'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  transaction-engine:
    build:
      context: ../backend/transaction-engine
      dockerfile: Dockerfile
    container_name: tigerex-transaction-engine
    ports:
      - '8082:8082'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  risk-management:
    build:
      context: ../backend/risk-management
      dockerfile: Dockerfile
    container_name: tigerex-risk-management
    ports:
      - '8083:8083'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  auth-service:
    build:
      context: ../backend/auth-service
      dockerfile: Dockerfile
    container_name: tigerex-auth-service
    ports:
      - '8084:8084'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - APPLE_CLIENT_ID=${APPLE_CLIENT_ID}
      - APPLE_CLIENT_SECRET=${APPLE_CLIENT_SECRET}
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  notification-service:
    build:
      context: ../backend/notification-service
      dockerfile: Dockerfile
    container_name: tigerex-notification-service
    ports:
      - '8085:8085'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  super-admin-system:
    build:
      context: ../backend/super-admin-system
      dockerfile: Dockerfile
    container_name: tigerex-super-admin
    ports:
      - '8086:8086'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KUBERNETES_CONFIG_PATH=/app/kubeconfig
      - DOCKER_HOST=unix:///var/run/docker.sock
    depends_on:
      - postgres
      - redis
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kubeconfig:/app/kubeconfig:ro
    networks:
      - tigerex-network
    restart: unless-stopped

  role-based-admin:
    build:
      context: ../backend/role-based-admin
      dockerfile: Dockerfile
    container_name: tigerex-role-admin
    ports:
      - '8087:8087'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  wallet-management:
    build:
      context: ../backend/wallet-management
      dockerfile: Dockerfile
    container_name: tigerex-wallet-management
    ports:
      - '8088:8088'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - ENCRYPTION_KEY=${WALLET_ENCRYPTION_KEY:-your-wallet-encryption-key}
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  affiliate-system:
    build:
      context: ../backend/affiliate-system
      dockerfile: Dockerfile
    container_name: tigerex-affiliate-system
    ports:
      - '8089:8089'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  ai-maintenance-system:
    build:
      context: ../backend/ai-maintenance-system
      dockerfile: Dockerfile
    container_name: tigerex-ai-maintenance
    ports:
      - '8090:8090'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped
    volumes:
      - ai_models:/app/models

  # Trading Services
  spot-trading:
    build:
      context: ../backend/spot-trading
      dockerfile: Dockerfile
    container_name: tigerex-spot-trading
    ports:
      - '8091:8091'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  etf-trading:
    build:
      context: ../backend/etf-trading
      dockerfile: Dockerfile
    container_name: tigerex-etf-trading
    ports:
      - '8092:8092'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  trading-pair-management:
    build:
      context: ../backend/trading-pair-management
      dockerfile: Dockerfile
    container_name: tigerex-trading-pairs
    ports:
      - '8093:8093'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  # Additional Trading Services
  derivatives-engine:
    build:
      context: ../backend/derivatives-engine
      dockerfile: Dockerfile
    container_name: tigerex-derivatives
    ports:
      - '8094:8094'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  options-trading:
    build:
      context: ../backend/options-trading
      dockerfile: Dockerfile
    container_name: tigerex-options
    ports:
      - '8095:8095'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  alpha-market-trading:
    build:
      context: ../backend/alpha-market-trading
      dockerfile: Dockerfile
    container_name: tigerex-alpha-market
    ports:
      - '8096:8096'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  # P2P and Social Trading
  p2p-trading:
    build:
      context: ../backend/p2p-trading
      dockerfile: Dockerfile
    container_name: tigerex-p2p-trading
    ports:
      - '8097:8097'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  p2p-admin:
    build:
      context: ../backend/p2p-admin
      dockerfile: Dockerfile
    container_name: tigerex-p2p-admin
    ports:
      - '8098:8098'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  copy-trading:
    build:
      context: ../backend/copy-trading
      dockerfile: Dockerfile
    container_name: tigerex-copy-trading
    ports:
      - '8099:8099'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  # Blockchain and DeFi Services
  web3-integration:
    build:
      context: ../backend/web3-integration
      dockerfile: Dockerfile
    container_name: tigerex-web3
    ports:
      - '8100:8100'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - ETHEREUM_RPC=${ETHEREUM_RPC}
      - BSC_RPC=${BSC_RPC}
      - POLYGON_RPC=${POLYGON_RPC}
      - SOLANA_RPC=${SOLANA_RPC}
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  dex-integration:
    build:
      context: ../backend/dex-integration
      dockerfile: Dockerfile
    container_name: tigerex-dex
    ports:
      - '8101:8101'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  liquidity-aggregator:
    build:
      context: ../backend/liquidity-aggregator
      dockerfile: Dockerfile
    container_name: tigerex-liquidity
    ports:
      - '8102:8102'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  # NFT and Gaming
  nft-marketplace:
    build:
      context: ../backend/nft-marketplace
      dockerfile: Dockerfile
    container_name: tigerex-nft
    ports:
      - '8103:8103'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - IPFS_URL=${IPFS_URL:-https://ipfs.infura.io:5001}
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  # Compliance and Security
  compliance-engine:
    build:
      context: ../backend/compliance-engine
      dockerfile: Dockerfile
    container_name: tigerex-compliance
    ports:
      - '8104:8104'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  # Token and Coin Services
  token-listing-service:
    build:
      context: ../backend/token-listing-service
      dockerfile: Dockerfile
    container_name: tigerex-token-listing
    ports:
      - '8105:8105'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  popular-coins-service:
    build:
      context: ../backend/popular-coins-service
      dockerfile: Dockerfile
    container_name: tigerex-popular-coins
    ports:
      - '8106:8106'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - COINGECKO_API_KEY=${COINGECKO_API_KEY}
      - COINMARKETCAP_API_KEY=${COINMARKETCAP_API_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  # Institutional Services
  institutional-services:
    build:
      context: ../backend/institutional-services
      dockerfile: Dockerfile
    container_name: tigerex-institutional
    ports:
      - '8107:8107'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  # White Label and Advanced Systems
  white-label-system:
    build:
      context: ../backend/white-label-system
      dockerfile: Dockerfile
    container_name: tigerex-white-label
    ports:
      - '8108:8108'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - DOCKER_HOST=unix:///var/run/docker.sock
      - KUBERNETES_CONFIG_PATH=/app/kubeconfig
    depends_on:
      - postgres
      - redis
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kubeconfig:/app/kubeconfig:ro
    networks:
      - tigerex-network
    restart: unless-stopped

  advanced-wallet-system:
    build:
      context: ../backend/advanced-wallet-system
      dockerfile: Dockerfile
    container_name: tigerex-advanced-wallet
    ports:
      - '8109:8109'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - ENCRYPTION_KEY=${WALLET_ENCRYPTION_KEY:-your-wallet-encryption-key}
      - HSM_CONFIG=${HSM_CONFIG}
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  # Block Explorer Service
  block-explorer:
    build:
      context: ../backend/block-explorer
      dockerfile: Dockerfile
    container_name: tigerex-block-explorer
    ports:
      - '8110:8110'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - DOCKER_HOST=unix:///var/run/docker.sock
      - KUBERNETES_CONFIG_PATH=/app/kubeconfig
      - BASE_DOMAIN=${BASE_DOMAIN:-tigerex.com}
    depends_on:
      - postgres
      - redis
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kubeconfig:/app/kubeconfig:ro
      - ./block-explorer/templates:/app/templates
      - ./block-explorer/builds:/app/builds
    networks:
      - tigerex-network
    restart: unless-stopped

  # Payment and Banking
  payment-gateway:
    build:
      context: ../backend/payment-gateway
      dockerfile: Dockerfile
    container_name: tigerex-payment
    ports:
      - '8111:8111'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  # Lending and Borrowing
  lending-borrowing:
    build:
      context: ../backend/lending-borrowing
      dockerfile: Dockerfile
    container_name: tigerex-lending
    ports:
      - '8112:8112'
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  # Frontend Services
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: tigerex-frontend
    ports:
      - '3000:3000'
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_WS_URL=ws://localhost:8080
      - NEXT_PUBLIC_SPOT_API_URL=http://localhost:8091
      - NEXT_PUBLIC_ETF_API_URL=http://localhost:8092
      - NEXT_PUBLIC_TRADING_PAIRS_API_URL=http://localhost:8093
    depends_on:
      - api-gateway
      - spot-trading
      - etf-trading
      - trading-pair-management
    networks:
      - tigerex-network
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: tigerex-prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - tigerex-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: tigerex-grafana
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - tigerex-network
    restart: unless-stopped

  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: tigerex-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - api-gateway
    networks:
      - tigerex-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  prometheus_data:
  grafana_data:
  ai_models:

networks:
  tigerex-network:
    driver: bridge

apiVersion: v1
kind: Namespace
metadata:
  name: tigerex
---
# ConfigMap for environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: tigerex-config
  namespace: tigerex
data:
  POSTGRES_DB: 'tigerex'
  POSTGRES_USER: 'postgres'
  REDIS_PORT: '6379'
  KAFKA_BROKERS: 'kafka:9092'
  API_GATEWAY_PORT: '8080'
---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: tigerex-secrets
  namespace: tigerex
type: Opaque
data:
  POSTGRES_PASSWORD: dGlnZXJleF9wYXNzd29yZA== # base64 encoded
  REDIS_PASSWORD: dGlnZXJleF9yZWRpcw== # base64 encoded
  JWT_SECRET: eW91ci1zdXBlci1zZWNyZXQtand0LWtleQ== # base64 encoded
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: tigerex
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: tigerex-config
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: tigerex-config
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: tigerex-secrets
                  key: POSTGRES_PASSWORD
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: '512Mi'
              cpu: '250m'
            limits:
              memory: '2Gi'
              cpu: '1000m'
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: tigerex
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
  type: ClusterIP
---
# PostgreSQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: tigerex
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: tigerex
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
          command: ['redis-server']
          args: ['--appendonly', 'yes', '--requirepass', '$(REDIS_PASSWORD)']
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: tigerex-secrets
                  key: REDIS_PASSWORD
          volumeMounts:
            - name: redis-storage
              mountPath: /data
          resources:
            requests:
              memory: '256Mi'
              cpu: '100m'
            limits:
              memory: '1Gi'
              cpu: '500m'
      volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: redis-pvc
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: tigerex
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
  type: ClusterIP
---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: tigerex
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# API Gateway Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: tigerex
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
        - name: api-gateway
          image: tigerex/api-gateway:latest
          ports:
            - containerPort: 8080
          env:
            - name: DATABASE_URL
              value: 'postgresql://postgres:$(POSTGRES_PASSWORD)@postgres:5432/tigerex'
            - name: REDIS_URL
              value: 'redis://:$(REDIS_PASSWORD)@redis:6379'
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: tigerex-secrets
                  key: POSTGRES_PASSWORD
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: tigerex-secrets
                  key: REDIS_PASSWORD
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: tigerex-secrets
                  key: JWT_SECRET
          resources:
            requests:
              memory: '256Mi'
              cpu: '200m'
            limits:
              memory: '1Gi'
              cpu: '1000m'
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
---
# API Gateway Service
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: tigerex
spec:
  selector:
    app: api-gateway
  ports:
    - port: 8080
      targetPort: 8080
  type: LoadBalancer
---
# Matching Engine Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: matching-engine
  namespace: tigerex
spec:
  replicas: 2
  selector:
    matchLabels:
      app: matching-engine
  template:
    metadata:
      labels:
        app: matching-engine
    spec:
      containers:
        - name: matching-engine
          image: tigerex/matching-engine:latest
          ports:
            - containerPort: 8081
          env:
            - name: DATABASE_URL
              value: 'postgresql://postgres:$(POSTGRES_PASSWORD)@postgres:5432/tigerex'
            - name: REDIS_URL
              value: 'redis://:$(REDIS_PASSWORD)@redis:6379'
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: tigerex-secrets
                  key: POSTGRES_PASSWORD
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: tigerex-secrets
                  key: REDIS_PASSWORD
          resources:
            requests:
              memory: '512Mi'
              cpu: '500m'
            limits:
              memory: '2Gi'
              cpu: '2000m'
          livenessProbe:
            httpGet:
              path: /health
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 10
---
# Matching Engine Service
apiVersion: v1
kind: Service
metadata:
  name: matching-engine
  namespace: tigerex
spec:
  selector:
    app: matching-engine
  ports:
    - port: 8081
      targetPort: 8081
  type: ClusterIP
---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: tigerex
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: tigerex/frontend:latest
          ports:
            - containerPort: 3000
          env:
            - name: NEXT_PUBLIC_API_URL
              value: 'http://api-gateway:8080'
            - name: NEXT_PUBLIC_WS_URL
              value: 'ws://api-gateway:8080'
          resources:
            requests:
              memory: '256Mi'
              cpu: '200m'
            limits:
              memory: '1Gi'
              cpu: '1000m'
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: tigerex
spec:
  selector:
    app: frontend
  ports:
    - port: 3000
      targetPort: 3000
  type: LoadBalancer
---
# Horizontal Pod Autoscaler for API Gateway
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: tigerex
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
# Horizontal Pod Autoscaler for Matching Engine
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: matching-engine-hpa
  namespace: tigerex
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: matching-engine
  minReplicas: 2
  maxReplicas: 8
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 70
---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: tigerex-network-policy
  namespace: tigerex
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: tigerex
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: tigerex
    - to: []
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
